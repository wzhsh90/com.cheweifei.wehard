// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "MmBp.pb.h"
// @@protoc_insertion_point(imports)

@implementation MmBpRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [MmBpRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL EmCmdIdIsValidValue(EmCmdId value) {
  switch (value) {
    case EmCmdIdEciNone:
    case EmCmdIdEciReqAuth:
    case EmCmdIdEciReqSendData:
    case EmCmdIdEciReqInit:
    case EmCmdIdEciRespAuth:
    case EmCmdIdEciRespSendData:
    case EmCmdIdEciRespInit:
    case EmCmdIdEciPushRecvData:
    case EmCmdIdEciPushSwitchView:
    case EmCmdIdEciPushSwitchBackgroud:
    case EmCmdIdEciErrDecode:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromEmCmdId(EmCmdId value) {
  switch (value) {
    case EmCmdIdEciNone:
      return @"EmCmdIdEciNone";
    case EmCmdIdEciReqAuth:
      return @"EmCmdIdEciReqAuth";
    case EmCmdIdEciReqSendData:
      return @"EmCmdIdEciReqSendData";
    case EmCmdIdEciReqInit:
      return @"EmCmdIdEciReqInit";
    case EmCmdIdEciRespAuth:
      return @"EmCmdIdEciRespAuth";
    case EmCmdIdEciRespSendData:
      return @"EmCmdIdEciRespSendData";
    case EmCmdIdEciRespInit:
      return @"EmCmdIdEciRespInit";
    case EmCmdIdEciPushRecvData:
      return @"EmCmdIdEciPushRecvData";
    case EmCmdIdEciPushSwitchView:
      return @"EmCmdIdEciPushSwitchView";
    case EmCmdIdEciPushSwitchBackgroud:
      return @"EmCmdIdEciPushSwitchBackgroud";
    case EmCmdIdEciErrDecode:
      return @"EmCmdIdEciErrDecode";
    default:
      return nil;
  }
}

BOOL EmErrorCodeIsValidValue(EmErrorCode value) {
  switch (value) {
    case EmErrorCodeEecSystem:
    case EmErrorCodeEecNeedAuth:
    case EmErrorCodeEecSessionTimeout:
    case EmErrorCodeEecDecode:
    case EmErrorCodeEecDeviceIsBlock:
    case EmErrorCodeEecServiceUnAvalibleInBackground:
    case EmErrorCodeEecDeviceProtoVersionNeedUpdate:
    case EmErrorCodeEecPhoneProtoVersionNeedUpdate:
    case EmErrorCodeEecMaxReqInQueue:
    case EmErrorCodeEecUserExitWxAccount:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromEmErrorCode(EmErrorCode value) {
  switch (value) {
    case EmErrorCodeEecSystem:
      return @"EmErrorCodeEecSystem";
    case EmErrorCodeEecNeedAuth:
      return @"EmErrorCodeEecNeedAuth";
    case EmErrorCodeEecSessionTimeout:
      return @"EmErrorCodeEecSessionTimeout";
    case EmErrorCodeEecDecode:
      return @"EmErrorCodeEecDecode";
    case EmErrorCodeEecDeviceIsBlock:
      return @"EmErrorCodeEecDeviceIsBlock";
    case EmErrorCodeEecServiceUnAvalibleInBackground:
      return @"EmErrorCodeEecServiceUnAvalibleInBackground";
    case EmErrorCodeEecDeviceProtoVersionNeedUpdate:
      return @"EmErrorCodeEecDeviceProtoVersionNeedUpdate";
    case EmErrorCodeEecPhoneProtoVersionNeedUpdate:
      return @"EmErrorCodeEecPhoneProtoVersionNeedUpdate";
    case EmErrorCodeEecMaxReqInQueue:
      return @"EmErrorCodeEecMaxReqInQueue";
    case EmErrorCodeEecUserExitWxAccount:
      return @"EmErrorCodeEecUserExitWxAccount";
    default:
      return nil;
  }
}

BOOL EmAuthMethodIsValidValue(EmAuthMethod value) {
  switch (value) {
    case EmAuthMethodEamMd5:
    case EmAuthMethodEamMacNoEncrypt:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromEmAuthMethod(EmAuthMethod value) {
  switch (value) {
    case EmAuthMethodEamMd5:
      return @"EmAuthMethodEamMd5";
    case EmAuthMethodEamMacNoEncrypt:
      return @"EmAuthMethodEamMacNoEncrypt";
    default:
      return nil;
  }
}

BOOL EmInitRespFieldFilterIsValidValue(EmInitRespFieldFilter value) {
  switch (value) {
    case EmInitRespFieldFilterEirffUserNickName:
    case EmInitRespFieldFilterEirffPlatformType:
    case EmInitRespFieldFilterEirffModel:
    case EmInitRespFieldFilterEirffOs:
    case EmInitRespFieldFilterEirffTime:
    case EmInitRespFieldFilterEirffTimeZone:
    case EmInitRespFieldFilterEirffTimeString:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromEmInitRespFieldFilter(EmInitRespFieldFilter value) {
  switch (value) {
    case EmInitRespFieldFilterEirffUserNickName:
      return @"EmInitRespFieldFilterEirffUserNickName";
    case EmInitRespFieldFilterEirffPlatformType:
      return @"EmInitRespFieldFilterEirffPlatformType";
    case EmInitRespFieldFilterEirffModel:
      return @"EmInitRespFieldFilterEirffModel";
    case EmInitRespFieldFilterEirffOs:
      return @"EmInitRespFieldFilterEirffOs";
    case EmInitRespFieldFilterEirffTime:
      return @"EmInitRespFieldFilterEirffTime";
    case EmInitRespFieldFilterEirffTimeZone:
      return @"EmInitRespFieldFilterEirffTimeZone";
    case EmInitRespFieldFilterEirffTimeString:
      return @"EmInitRespFieldFilterEirffTimeString";
    default:
      return nil;
  }
}

BOOL EmInitScenceIsValidValue(EmInitScence value) {
  switch (value) {
    case EmInitScenceEisDeviceChat:
    case EmInitScenceEisAutoSync:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromEmInitScence(EmInitScence value) {
  switch (value) {
    case EmInitScenceEisDeviceChat:
      return @"EmInitScenceEisDeviceChat";
    case EmInitScenceEisAutoSync:
      return @"EmInitScenceEisAutoSync";
    default:
      return nil;
  }
}

BOOL EmPlatformTypeIsValidValue(EmPlatformType value) {
  switch (value) {
    case EmPlatformTypeEptIos:
    case EmPlatformTypeEptAndriod:
    case EmPlatformTypeEptWp:
    case EmPlatformTypeEptS60V3:
    case EmPlatformTypeEptS60V5:
    case EmPlatformTypeEptS40:
    case EmPlatformTypeEptBb:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromEmPlatformType(EmPlatformType value) {
  switch (value) {
    case EmPlatformTypeEptIos:
      return @"EmPlatformTypeEptIos";
    case EmPlatformTypeEptAndriod:
      return @"EmPlatformTypeEptAndriod";
    case EmPlatformTypeEptWp:
      return @"EmPlatformTypeEptWp";
    case EmPlatformTypeEptS60V3:
      return @"EmPlatformTypeEptS60V3";
    case EmPlatformTypeEptS60V5:
      return @"EmPlatformTypeEptS60V5";
    case EmPlatformTypeEptS40:
      return @"EmPlatformTypeEptS40";
    case EmPlatformTypeEptBb:
      return @"EmPlatformTypeEptBb";
    default:
      return nil;
  }
}

BOOL EmDeviceDataTypeIsValidValue(EmDeviceDataType value) {
  switch (value) {
    case EmDeviceDataTypeEddtManufatureSvr:
    case EmDeviceDataTypeEddtWxWristBand:
    case EmDeviceDataTypeEddtWxDeviceHtmlChatView:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromEmDeviceDataType(EmDeviceDataType value) {
  switch (value) {
    case EmDeviceDataTypeEddtManufatureSvr:
      return @"EmDeviceDataTypeEddtManufatureSvr";
    case EmDeviceDataTypeEddtWxWristBand:
      return @"EmDeviceDataTypeEddtWxWristBand";
    case EmDeviceDataTypeEddtWxDeviceHtmlChatView:
      return @"EmDeviceDataTypeEddtWxDeviceHtmlChatView";
    default:
      return nil;
  }
}

BOOL EmSwitchViewOpIsValidValue(EmSwitchViewOp value) {
  switch (value) {
    case EmSwitchViewOpEsvoEnter:
    case EmSwitchViewOpEsvoExit:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromEmSwitchViewOp(EmSwitchViewOp value) {
  switch (value) {
    case EmSwitchViewOpEsvoEnter:
      return @"EmSwitchViewOpEsvoEnter";
    case EmSwitchViewOpEsvoExit:
      return @"EmSwitchViewOpEsvoExit";
    default:
      return nil;
  }
}

BOOL EmViewIdIsValidValue(EmViewId value) {
  switch (value) {
    case EmViewIdEviDeviceChatView:
    case EmViewIdEviDeviceChatHtmlView:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromEmViewId(EmViewId value) {
  switch (value) {
    case EmViewIdEviDeviceChatView:
      return @"EmViewIdEviDeviceChatView";
    case EmViewIdEviDeviceChatHtmlView:
      return @"EmViewIdEviDeviceChatHtmlView";
    default:
      return nil;
  }
}

BOOL EmSwitchBackgroundOpIsValidValue(EmSwitchBackgroundOp value) {
  switch (value) {
    case EmSwitchBackgroundOpEsboEnterBackground:
    case EmSwitchBackgroundOpEsboEnterForground:
    case EmSwitchBackgroundOpEsboSleep:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromEmSwitchBackgroundOp(EmSwitchBackgroundOp value) {
  switch (value) {
    case EmSwitchBackgroundOpEsboEnterBackground:
      return @"EmSwitchBackgroundOpEsboEnterBackground";
    case EmSwitchBackgroundOpEsboEnterForground:
      return @"EmSwitchBackgroundOpEsboEnterForground";
    case EmSwitchBackgroundOpEsboSleep:
      return @"EmSwitchBackgroundOpEsboSleep";
    default:
      return nil;
  }
}

@interface BaseRequest ()
@end

@implementation BaseRequest

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static BaseRequest* defaultBaseRequestInstance = nil;
+ (void) initialize {
  if (self == [BaseRequest class]) {
    defaultBaseRequestInstance = [[BaseRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBaseRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultBaseRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BaseRequest*) parseFromData:(NSData*) data {
  return (BaseRequest*)[[[BaseRequest builder] mergeFromData:data] build];
}
+ (BaseRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BaseRequest*)[[[BaseRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BaseRequest*) parseFromInputStream:(NSInputStream*) input {
  return (BaseRequest*)[[[BaseRequest builder] mergeFromInputStream:input] build];
}
+ (BaseRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BaseRequest*)[[[BaseRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BaseRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BaseRequest*)[[[BaseRequest builder] mergeFromCodedInputStream:input] build];
}
+ (BaseRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BaseRequest*)[[[BaseRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BaseRequestBuilder*) builder {
  return [[BaseRequestBuilder alloc] init];
}
+ (BaseRequestBuilder*) builderWithPrototype:(BaseRequest*) prototype {
  return [[BaseRequest builder] mergeFrom:prototype];
}
- (BaseRequestBuilder*) builder {
  return [BaseRequest builder];
}
- (BaseRequestBuilder*) toBuilder {
  return [BaseRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BaseRequest class]]) {
    return NO;
  }
  BaseRequest *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BaseRequestBuilder()
@property (strong) BaseRequest* resultBaseRequest;
@end

@implementation BaseRequestBuilder
@synthesize resultBaseRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBaseRequest = [[BaseRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBaseRequest;
}
- (BaseRequestBuilder*) clear {
  self.resultBaseRequest = [[BaseRequest alloc] init];
  return self;
}
- (BaseRequestBuilder*) clone {
  return [BaseRequest builderWithPrototype:resultBaseRequest];
}
- (BaseRequest*) defaultInstance {
  return [BaseRequest defaultInstance];
}
- (BaseRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BaseRequest*) buildPartial {
  BaseRequest* returnMe = resultBaseRequest;
  self.resultBaseRequest = nil;
  return returnMe;
}
- (BaseRequestBuilder*) mergeFrom:(BaseRequest*) other {
  if (other == [BaseRequest defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BaseRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BaseRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface BaseResponse ()
@property SInt32 errCode;
@property (strong) NSString* errMsg;
@end

@implementation BaseResponse

- (BOOL) hasErrCode {
  return !!hasErrCode_;
}
- (void) setHasErrCode:(BOOL) _value_ {
  hasErrCode_ = !!_value_;
}
@synthesize errCode;
- (BOOL) hasErrMsg {
  return !!hasErrMsg_;
}
- (void) setHasErrMsg:(BOOL) _value_ {
  hasErrMsg_ = !!_value_;
}
@synthesize errMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.errCode = 0;
    self.errMsg = @"";
  }
  return self;
}
static BaseResponse* defaultBaseResponseInstance = nil;
+ (void) initialize {
  if (self == [BaseResponse class]) {
    defaultBaseResponseInstance = [[BaseResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBaseResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultBaseResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasErrCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasErrCode) {
    [output writeInt32:1 value:self.errCode];
  }
  if (self.hasErrMsg) {
    [output writeString:2 value:self.errMsg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasErrCode) {
    size_ += computeInt32Size(1, self.errCode);
  }
  if (self.hasErrMsg) {
    size_ += computeStringSize(2, self.errMsg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BaseResponse*) parseFromData:(NSData*) data {
  return (BaseResponse*)[[[BaseResponse builder] mergeFromData:data] build];
}
+ (BaseResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BaseResponse*)[[[BaseResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BaseResponse*) parseFromInputStream:(NSInputStream*) input {
  return (BaseResponse*)[[[BaseResponse builder] mergeFromInputStream:input] build];
}
+ (BaseResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BaseResponse*)[[[BaseResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BaseResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BaseResponse*)[[[BaseResponse builder] mergeFromCodedInputStream:input] build];
}
+ (BaseResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BaseResponse*)[[[BaseResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BaseResponseBuilder*) builder {
  return [[BaseResponseBuilder alloc] init];
}
+ (BaseResponseBuilder*) builderWithPrototype:(BaseResponse*) prototype {
  return [[BaseResponse builder] mergeFrom:prototype];
}
- (BaseResponseBuilder*) builder {
  return [BaseResponse builder];
}
- (BaseResponseBuilder*) toBuilder {
  return [BaseResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasErrCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"errCode", [NSNumber numberWithInteger:self.errCode]];
  }
  if (self.hasErrMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"errMsg", self.errMsg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasErrCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.errCode] forKey: @"errCode"];
  }
  if (self.hasErrMsg) {
    [dictionary setObject: self.errMsg forKey: @"errMsg"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BaseResponse class]]) {
    return NO;
  }
  BaseResponse *otherMessage = other;
  return
      self.hasErrCode == otherMessage.hasErrCode &&
      (!self.hasErrCode || self.errCode == otherMessage.errCode) &&
      self.hasErrMsg == otherMessage.hasErrMsg &&
      (!self.hasErrMsg || [self.errMsg isEqual:otherMessage.errMsg]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasErrCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.errCode] hash];
  }
  if (self.hasErrMsg) {
    hashCode = hashCode * 31 + [self.errMsg hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BaseResponseBuilder()
@property (strong) BaseResponse* resultBaseResponse;
@end

@implementation BaseResponseBuilder
@synthesize resultBaseResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBaseResponse = [[BaseResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBaseResponse;
}
- (BaseResponseBuilder*) clear {
  self.resultBaseResponse = [[BaseResponse alloc] init];
  return self;
}
- (BaseResponseBuilder*) clone {
  return [BaseResponse builderWithPrototype:resultBaseResponse];
}
- (BaseResponse*) defaultInstance {
  return [BaseResponse defaultInstance];
}
- (BaseResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BaseResponse*) buildPartial {
  BaseResponse* returnMe = resultBaseResponse;
  self.resultBaseResponse = nil;
  return returnMe;
}
- (BaseResponseBuilder*) mergeFrom:(BaseResponse*) other {
  if (other == [BaseResponse defaultInstance]) {
    return self;
  }
  if (other.hasErrCode) {
    [self setErrCode:other.errCode];
  }
  if (other.hasErrMsg) {
    [self setErrMsg:other.errMsg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BaseResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BaseResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setErrCode:[input readInt32]];
        break;
      }
      case 18: {
        [self setErrMsg:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasErrCode {
  return resultBaseResponse.hasErrCode;
}
- (SInt32) errCode {
  return resultBaseResponse.errCode;
}
- (BaseResponseBuilder*) setErrCode:(SInt32) value {
  resultBaseResponse.hasErrCode = YES;
  resultBaseResponse.errCode = value;
  return self;
}
- (BaseResponseBuilder*) clearErrCode {
  resultBaseResponse.hasErrCode = NO;
  resultBaseResponse.errCode = 0;
  return self;
}
- (BOOL) hasErrMsg {
  return resultBaseResponse.hasErrMsg;
}
- (NSString*) errMsg {
  return resultBaseResponse.errMsg;
}
- (BaseResponseBuilder*) setErrMsg:(NSString*) value {
  resultBaseResponse.hasErrMsg = YES;
  resultBaseResponse.errMsg = value;
  return self;
}
- (BaseResponseBuilder*) clearErrMsg {
  resultBaseResponse.hasErrMsg = NO;
  resultBaseResponse.errMsg = @"";
  return self;
}
@end

@interface BasePush ()
@end

@implementation BasePush

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static BasePush* defaultBasePushInstance = nil;
+ (void) initialize {
  if (self == [BasePush class]) {
    defaultBasePushInstance = [[BasePush alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBasePushInstance;
}
- (instancetype) defaultInstance {
  return defaultBasePushInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BasePush*) parseFromData:(NSData*) data {
  return (BasePush*)[[[BasePush builder] mergeFromData:data] build];
}
+ (BasePush*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BasePush*)[[[BasePush builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BasePush*) parseFromInputStream:(NSInputStream*) input {
  return (BasePush*)[[[BasePush builder] mergeFromInputStream:input] build];
}
+ (BasePush*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BasePush*)[[[BasePush builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BasePush*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BasePush*)[[[BasePush builder] mergeFromCodedInputStream:input] build];
}
+ (BasePush*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BasePush*)[[[BasePush builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BasePushBuilder*) builder {
  return [[BasePushBuilder alloc] init];
}
+ (BasePushBuilder*) builderWithPrototype:(BasePush*) prototype {
  return [[BasePush builder] mergeFrom:prototype];
}
- (BasePushBuilder*) builder {
  return [BasePush builder];
}
- (BasePushBuilder*) toBuilder {
  return [BasePush builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BasePush class]]) {
    return NO;
  }
  BasePush *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BasePushBuilder()
@property (strong) BasePush* resultBasePush;
@end

@implementation BasePushBuilder
@synthesize resultBasePush;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBasePush = [[BasePush alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBasePush;
}
- (BasePushBuilder*) clear {
  self.resultBasePush = [[BasePush alloc] init];
  return self;
}
- (BasePushBuilder*) clone {
  return [BasePush builderWithPrototype:resultBasePush];
}
- (BasePush*) defaultInstance {
  return [BasePush defaultInstance];
}
- (BasePush*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BasePush*) buildPartial {
  BasePush* returnMe = resultBasePush;
  self.resultBasePush = nil;
  return returnMe;
}
- (BasePushBuilder*) mergeFrom:(BasePush*) other {
  if (other == [BasePush defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BasePushBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BasePushBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface AuthRequest ()
@property (strong) BaseRequest* baseRequest;
@property (strong) NSData* md5DeviceTypeAndDeviceId;
@property SInt32 protoVersion;
@property SInt32 authProto;
@property EmAuthMethod authMethod;
@property (strong) NSData* aesSign;
@property (strong) NSData* macAddress;
@property (strong) NSString* timeZone;
@property (strong) NSString* language;
@property (strong) NSString* deviceName;
@end

@implementation AuthRequest

- (BOOL) hasBaseRequest {
  return !!hasBaseRequest_;
}
- (void) setHasBaseRequest:(BOOL) _value_ {
  hasBaseRequest_ = !!_value_;
}
@synthesize baseRequest;
- (BOOL) hasMd5DeviceTypeAndDeviceId {
  return !!hasMd5DeviceTypeAndDeviceId_;
}
- (void) setHasMd5DeviceTypeAndDeviceId:(BOOL) _value_ {
  hasMd5DeviceTypeAndDeviceId_ = !!_value_;
}
@synthesize md5DeviceTypeAndDeviceId;
- (BOOL) hasProtoVersion {
  return !!hasProtoVersion_;
}
- (void) setHasProtoVersion:(BOOL) _value_ {
  hasProtoVersion_ = !!_value_;
}
@synthesize protoVersion;
- (BOOL) hasAuthProto {
  return !!hasAuthProto_;
}
- (void) setHasAuthProto:(BOOL) _value_ {
  hasAuthProto_ = !!_value_;
}
@synthesize authProto;
- (BOOL) hasAuthMethod {
  return !!hasAuthMethod_;
}
- (void) setHasAuthMethod:(BOOL) _value_ {
  hasAuthMethod_ = !!_value_;
}
@synthesize authMethod;
- (BOOL) hasAesSign {
  return !!hasAesSign_;
}
- (void) setHasAesSign:(BOOL) _value_ {
  hasAesSign_ = !!_value_;
}
@synthesize aesSign;
- (BOOL) hasMacAddress {
  return !!hasMacAddress_;
}
- (void) setHasMacAddress:(BOOL) _value_ {
  hasMacAddress_ = !!_value_;
}
@synthesize macAddress;
- (BOOL) hasTimeZone {
  return !!hasTimeZone_;
}
- (void) setHasTimeZone:(BOOL) _value_ {
  hasTimeZone_ = !!_value_;
}
@synthesize timeZone;
- (BOOL) hasLanguage {
  return !!hasLanguage_;
}
- (void) setHasLanguage:(BOOL) _value_ {
  hasLanguage_ = !!_value_;
}
@synthesize language;
- (BOOL) hasDeviceName {
  return !!hasDeviceName_;
}
- (void) setHasDeviceName:(BOOL) _value_ {
  hasDeviceName_ = !!_value_;
}
@synthesize deviceName;
- (instancetype) init {
  if ((self = [super init])) {
    self.baseRequest = [BaseRequest defaultInstance];
    self.md5DeviceTypeAndDeviceId = [NSData data];
    self.protoVersion = 0;
    self.authProto = 0;
    self.authMethod = EmAuthMethodEamMd5;
    self.aesSign = [NSData data];
    self.macAddress = [NSData data];
    self.timeZone = @"";
    self.language = @"";
    self.deviceName = @"";
  }
  return self;
}
static AuthRequest* defaultAuthRequestInstance = nil;
+ (void) initialize {
  if (self == [AuthRequest class]) {
    defaultAuthRequestInstance = [[AuthRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAuthRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultAuthRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasBaseRequest) {
    return NO;
  }
  if (!self.hasProtoVersion) {
    return NO;
  }
  if (!self.hasAuthProto) {
    return NO;
  }
  if (!self.hasAuthMethod) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBaseRequest) {
    [output writeMessage:1 value:self.baseRequest];
  }
  if (self.hasMd5DeviceTypeAndDeviceId) {
    [output writeData:2 value:self.md5DeviceTypeAndDeviceId];
  }
  if (self.hasProtoVersion) {
    [output writeInt32:3 value:self.protoVersion];
  }
  if (self.hasAuthProto) {
    [output writeInt32:4 value:self.authProto];
  }
  if (self.hasAuthMethod) {
    [output writeEnum:5 value:self.authMethod];
  }
  if (self.hasAesSign) {
    [output writeData:6 value:self.aesSign];
  }
  if (self.hasMacAddress) {
    [output writeData:7 value:self.macAddress];
  }
  if (self.hasTimeZone) {
    [output writeString:10 value:self.timeZone];
  }
  if (self.hasLanguage) {
    [output writeString:11 value:self.language];
  }
  if (self.hasDeviceName) {
    [output writeString:12 value:self.deviceName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBaseRequest) {
    size_ += computeMessageSize(1, self.baseRequest);
  }
  if (self.hasMd5DeviceTypeAndDeviceId) {
    size_ += computeDataSize(2, self.md5DeviceTypeAndDeviceId);
  }
  if (self.hasProtoVersion) {
    size_ += computeInt32Size(3, self.protoVersion);
  }
  if (self.hasAuthProto) {
    size_ += computeInt32Size(4, self.authProto);
  }
  if (self.hasAuthMethod) {
    size_ += computeEnumSize(5, self.authMethod);
  }
  if (self.hasAesSign) {
    size_ += computeDataSize(6, self.aesSign);
  }
  if (self.hasMacAddress) {
    size_ += computeDataSize(7, self.macAddress);
  }
  if (self.hasTimeZone) {
    size_ += computeStringSize(10, self.timeZone);
  }
  if (self.hasLanguage) {
    size_ += computeStringSize(11, self.language);
  }
  if (self.hasDeviceName) {
    size_ += computeStringSize(12, self.deviceName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AuthRequest*) parseFromData:(NSData*) data {
  return (AuthRequest*)[[[AuthRequest builder] mergeFromData:data] build];
}
+ (AuthRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AuthRequest*)[[[AuthRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AuthRequest*) parseFromInputStream:(NSInputStream*) input {
  return (AuthRequest*)[[[AuthRequest builder] mergeFromInputStream:input] build];
}
+ (AuthRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AuthRequest*)[[[AuthRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AuthRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AuthRequest*)[[[AuthRequest builder] mergeFromCodedInputStream:input] build];
}
+ (AuthRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AuthRequest*)[[[AuthRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AuthRequestBuilder*) builder {
  return [[AuthRequestBuilder alloc] init];
}
+ (AuthRequestBuilder*) builderWithPrototype:(AuthRequest*) prototype {
  return [[AuthRequest builder] mergeFrom:prototype];
}
- (AuthRequestBuilder*) builder {
  return [AuthRequest builder];
}
- (AuthRequestBuilder*) toBuilder {
  return [AuthRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBaseRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"baseRequest"];
    [self.baseRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasMd5DeviceTypeAndDeviceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"md5DeviceTypeAndDeviceId", self.md5DeviceTypeAndDeviceId];
  }
  if (self.hasProtoVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"protoVersion", [NSNumber numberWithInteger:self.protoVersion]];
  }
  if (self.hasAuthProto) {
    [output appendFormat:@"%@%@: %@\n", indent, @"authProto", [NSNumber numberWithInteger:self.authProto]];
  }
  if (self.hasAuthMethod) {
    [output appendFormat:@"%@%@: %@\n", indent, @"authMethod", NSStringFromEmAuthMethod(self.authMethod)];
  }
  if (self.hasAesSign) {
    [output appendFormat:@"%@%@: %@\n", indent, @"aesSign", self.aesSign];
  }
  if (self.hasMacAddress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"macAddress", self.macAddress];
  }
  if (self.hasTimeZone) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeZone", self.timeZone];
  }
  if (self.hasLanguage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"language", self.language];
  }
  if (self.hasDeviceName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceName", self.deviceName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBaseRequest) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.baseRequest storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"baseRequest"];
  }
  if (self.hasMd5DeviceTypeAndDeviceId) {
    [dictionary setObject: self.md5DeviceTypeAndDeviceId forKey: @"md5DeviceTypeAndDeviceId"];
  }
  if (self.hasProtoVersion) {
    [dictionary setObject: [NSNumber numberWithInteger:self.protoVersion] forKey: @"protoVersion"];
  }
  if (self.hasAuthProto) {
    [dictionary setObject: [NSNumber numberWithInteger:self.authProto] forKey: @"authProto"];
  }
  if (self.hasAuthMethod) {
    [dictionary setObject: @(self.authMethod) forKey: @"authMethod"];
  }
  if (self.hasAesSign) {
    [dictionary setObject: self.aesSign forKey: @"aesSign"];
  }
  if (self.hasMacAddress) {
    [dictionary setObject: self.macAddress forKey: @"macAddress"];
  }
  if (self.hasTimeZone) {
    [dictionary setObject: self.timeZone forKey: @"timeZone"];
  }
  if (self.hasLanguage) {
    [dictionary setObject: self.language forKey: @"language"];
  }
  if (self.hasDeviceName) {
    [dictionary setObject: self.deviceName forKey: @"deviceName"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AuthRequest class]]) {
    return NO;
  }
  AuthRequest *otherMessage = other;
  return
      self.hasBaseRequest == otherMessage.hasBaseRequest &&
      (!self.hasBaseRequest || [self.baseRequest isEqual:otherMessage.baseRequest]) &&
      self.hasMd5DeviceTypeAndDeviceId == otherMessage.hasMd5DeviceTypeAndDeviceId &&
      (!self.hasMd5DeviceTypeAndDeviceId || [self.md5DeviceTypeAndDeviceId isEqual:otherMessage.md5DeviceTypeAndDeviceId]) &&
      self.hasProtoVersion == otherMessage.hasProtoVersion &&
      (!self.hasProtoVersion || self.protoVersion == otherMessage.protoVersion) &&
      self.hasAuthProto == otherMessage.hasAuthProto &&
      (!self.hasAuthProto || self.authProto == otherMessage.authProto) &&
      self.hasAuthMethod == otherMessage.hasAuthMethod &&
      (!self.hasAuthMethod || self.authMethod == otherMessage.authMethod) &&
      self.hasAesSign == otherMessage.hasAesSign &&
      (!self.hasAesSign || [self.aesSign isEqual:otherMessage.aesSign]) &&
      self.hasMacAddress == otherMessage.hasMacAddress &&
      (!self.hasMacAddress || [self.macAddress isEqual:otherMessage.macAddress]) &&
      self.hasTimeZone == otherMessage.hasTimeZone &&
      (!self.hasTimeZone || [self.timeZone isEqual:otherMessage.timeZone]) &&
      self.hasLanguage == otherMessage.hasLanguage &&
      (!self.hasLanguage || [self.language isEqual:otherMessage.language]) &&
      self.hasDeviceName == otherMessage.hasDeviceName &&
      (!self.hasDeviceName || [self.deviceName isEqual:otherMessage.deviceName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBaseRequest) {
    hashCode = hashCode * 31 + [self.baseRequest hash];
  }
  if (self.hasMd5DeviceTypeAndDeviceId) {
    hashCode = hashCode * 31 + [self.md5DeviceTypeAndDeviceId hash];
  }
  if (self.hasProtoVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.protoVersion] hash];
  }
  if (self.hasAuthProto) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.authProto] hash];
  }
  if (self.hasAuthMethod) {
    hashCode = hashCode * 31 + self.authMethod;
  }
  if (self.hasAesSign) {
    hashCode = hashCode * 31 + [self.aesSign hash];
  }
  if (self.hasMacAddress) {
    hashCode = hashCode * 31 + [self.macAddress hash];
  }
  if (self.hasTimeZone) {
    hashCode = hashCode * 31 + [self.timeZone hash];
  }
  if (self.hasLanguage) {
    hashCode = hashCode * 31 + [self.language hash];
  }
  if (self.hasDeviceName) {
    hashCode = hashCode * 31 + [self.deviceName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AuthRequestBuilder()
@property (strong) AuthRequest* resultAuthRequest;
@end

@implementation AuthRequestBuilder
@synthesize resultAuthRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAuthRequest = [[AuthRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAuthRequest;
}
- (AuthRequestBuilder*) clear {
  self.resultAuthRequest = [[AuthRequest alloc] init];
  return self;
}
- (AuthRequestBuilder*) clone {
  return [AuthRequest builderWithPrototype:resultAuthRequest];
}
- (AuthRequest*) defaultInstance {
  return [AuthRequest defaultInstance];
}
- (AuthRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AuthRequest*) buildPartial {
  AuthRequest* returnMe = resultAuthRequest;
  self.resultAuthRequest = nil;
  return returnMe;
}
- (AuthRequestBuilder*) mergeFrom:(AuthRequest*) other {
  if (other == [AuthRequest defaultInstance]) {
    return self;
  }
  if (other.hasBaseRequest) {
    [self mergeBaseRequest:other.baseRequest];
  }
  if (other.hasMd5DeviceTypeAndDeviceId) {
    [self setMd5DeviceTypeAndDeviceId:other.md5DeviceTypeAndDeviceId];
  }
  if (other.hasProtoVersion) {
    [self setProtoVersion:other.protoVersion];
  }
  if (other.hasAuthProto) {
    [self setAuthProto:other.authProto];
  }
  if (other.hasAuthMethod) {
    [self setAuthMethod:other.authMethod];
  }
  if (other.hasAesSign) {
    [self setAesSign:other.aesSign];
  }
  if (other.hasMacAddress) {
    [self setMacAddress:other.macAddress];
  }
  if (other.hasTimeZone) {
    [self setTimeZone:other.timeZone];
  }
  if (other.hasLanguage) {
    [self setLanguage:other.language];
  }
  if (other.hasDeviceName) {
    [self setDeviceName:other.deviceName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AuthRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AuthRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BaseRequestBuilder* subBuilder = [BaseRequest builder];
        if (self.hasBaseRequest) {
          [subBuilder mergeFrom:self.baseRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBaseRequest:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setMd5DeviceTypeAndDeviceId:[input readData]];
        break;
      }
      case 24: {
        [self setProtoVersion:[input readInt32]];
        break;
      }
      case 32: {
        [self setAuthProto:[input readInt32]];
        break;
      }
      case 40: {
        EmAuthMethod value = (EmAuthMethod)[input readEnum];
        if (EmAuthMethodIsValidValue(value)) {
          [self setAuthMethod:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 50: {
        [self setAesSign:[input readData]];
        break;
      }
      case 58: {
        [self setMacAddress:[input readData]];
        break;
      }
      case 82: {
        [self setTimeZone:[input readString]];
        break;
      }
      case 90: {
        [self setLanguage:[input readString]];
        break;
      }
      case 98: {
        [self setDeviceName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasBaseRequest {
  return resultAuthRequest.hasBaseRequest;
}
- (BaseRequest*) baseRequest {
  return resultAuthRequest.baseRequest;
}
- (AuthRequestBuilder*) setBaseRequest:(BaseRequest*) value {
  resultAuthRequest.hasBaseRequest = YES;
  resultAuthRequest.baseRequest = value;
  return self;
}
- (AuthRequestBuilder*) setBaseRequestBuilder:(BaseRequestBuilder*) builderForValue {
  return [self setBaseRequest:[builderForValue build]];
}
- (AuthRequestBuilder*) mergeBaseRequest:(BaseRequest*) value {
  if (resultAuthRequest.hasBaseRequest &&
      resultAuthRequest.baseRequest != [BaseRequest defaultInstance]) {
    resultAuthRequest.baseRequest =
      [[[BaseRequest builderWithPrototype:resultAuthRequest.baseRequest] mergeFrom:value] buildPartial];
  } else {
    resultAuthRequest.baseRequest = value;
  }
  resultAuthRequest.hasBaseRequest = YES;
  return self;
}
- (AuthRequestBuilder*) clearBaseRequest {
  resultAuthRequest.hasBaseRequest = NO;
  resultAuthRequest.baseRequest = [BaseRequest defaultInstance];
  return self;
}
- (BOOL) hasMd5DeviceTypeAndDeviceId {
  return resultAuthRequest.hasMd5DeviceTypeAndDeviceId;
}
- (NSData*) md5DeviceTypeAndDeviceId {
  return resultAuthRequest.md5DeviceTypeAndDeviceId;
}
- (AuthRequestBuilder*) setMd5DeviceTypeAndDeviceId:(NSData*) value {
  resultAuthRequest.hasMd5DeviceTypeAndDeviceId = YES;
  resultAuthRequest.md5DeviceTypeAndDeviceId = value;
  return self;
}
- (AuthRequestBuilder*) clearMd5DeviceTypeAndDeviceId {
  resultAuthRequest.hasMd5DeviceTypeAndDeviceId = NO;
  resultAuthRequest.md5DeviceTypeAndDeviceId = [NSData data];
  return self;
}
- (BOOL) hasProtoVersion {
  return resultAuthRequest.hasProtoVersion;
}
- (SInt32) protoVersion {
  return resultAuthRequest.protoVersion;
}
- (AuthRequestBuilder*) setProtoVersion:(SInt32) value {
  resultAuthRequest.hasProtoVersion = YES;
  resultAuthRequest.protoVersion = value;
  return self;
}
- (AuthRequestBuilder*) clearProtoVersion {
  resultAuthRequest.hasProtoVersion = NO;
  resultAuthRequest.protoVersion = 0;
  return self;
}
- (BOOL) hasAuthProto {
  return resultAuthRequest.hasAuthProto;
}
- (SInt32) authProto {
  return resultAuthRequest.authProto;
}
- (AuthRequestBuilder*) setAuthProto:(SInt32) value {
  resultAuthRequest.hasAuthProto = YES;
  resultAuthRequest.authProto = value;
  return self;
}
- (AuthRequestBuilder*) clearAuthProto {
  resultAuthRequest.hasAuthProto = NO;
  resultAuthRequest.authProto = 0;
  return self;
}
- (BOOL) hasAuthMethod {
  return resultAuthRequest.hasAuthMethod;
}
- (EmAuthMethod) authMethod {
  return resultAuthRequest.authMethod;
}
- (AuthRequestBuilder*) setAuthMethod:(EmAuthMethod) value {
  resultAuthRequest.hasAuthMethod = YES;
  resultAuthRequest.authMethod = value;
  return self;
}
- (AuthRequestBuilder*) clearAuthMethod {
  resultAuthRequest.hasAuthMethod = NO;
  resultAuthRequest.authMethod = EmAuthMethodEamMd5;
  return self;
}
- (BOOL) hasAesSign {
  return resultAuthRequest.hasAesSign;
}
- (NSData*) aesSign {
  return resultAuthRequest.aesSign;
}
- (AuthRequestBuilder*) setAesSign:(NSData*) value {
  resultAuthRequest.hasAesSign = YES;
  resultAuthRequest.aesSign = value;
  return self;
}
- (AuthRequestBuilder*) clearAesSign {
  resultAuthRequest.hasAesSign = NO;
  resultAuthRequest.aesSign = [NSData data];
  return self;
}
- (BOOL) hasMacAddress {
  return resultAuthRequest.hasMacAddress;
}
- (NSData*) macAddress {
  return resultAuthRequest.macAddress;
}
- (AuthRequestBuilder*) setMacAddress:(NSData*) value {
  resultAuthRequest.hasMacAddress = YES;
  resultAuthRequest.macAddress = value;
  return self;
}
- (AuthRequestBuilder*) clearMacAddress {
  resultAuthRequest.hasMacAddress = NO;
  resultAuthRequest.macAddress = [NSData data];
  return self;
}
- (BOOL) hasTimeZone {
  return resultAuthRequest.hasTimeZone;
}
- (NSString*) timeZone {
  return resultAuthRequest.timeZone;
}
- (AuthRequestBuilder*) setTimeZone:(NSString*) value {
  resultAuthRequest.hasTimeZone = YES;
  resultAuthRequest.timeZone = value;
  return self;
}
- (AuthRequestBuilder*) clearTimeZone {
  resultAuthRequest.hasTimeZone = NO;
  resultAuthRequest.timeZone = @"";
  return self;
}
- (BOOL) hasLanguage {
  return resultAuthRequest.hasLanguage;
}
- (NSString*) language {
  return resultAuthRequest.language;
}
- (AuthRequestBuilder*) setLanguage:(NSString*) value {
  resultAuthRequest.hasLanguage = YES;
  resultAuthRequest.language = value;
  return self;
}
- (AuthRequestBuilder*) clearLanguage {
  resultAuthRequest.hasLanguage = NO;
  resultAuthRequest.language = @"";
  return self;
}
- (BOOL) hasDeviceName {
  return resultAuthRequest.hasDeviceName;
}
- (NSString*) deviceName {
  return resultAuthRequest.deviceName;
}
- (AuthRequestBuilder*) setDeviceName:(NSString*) value {
  resultAuthRequest.hasDeviceName = YES;
  resultAuthRequest.deviceName = value;
  return self;
}
- (AuthRequestBuilder*) clearDeviceName {
  resultAuthRequest.hasDeviceName = NO;
  resultAuthRequest.deviceName = @"";
  return self;
}
@end

@interface AuthResponse ()
@property (strong) BaseResponse* baseResponse;
@property (strong) NSData* aesSessionKey;
@end

@implementation AuthResponse

- (BOOL) hasBaseResponse {
  return !!hasBaseResponse_;
}
- (void) setHasBaseResponse:(BOOL) _value_ {
  hasBaseResponse_ = !!_value_;
}
@synthesize baseResponse;
- (BOOL) hasAesSessionKey {
  return !!hasAesSessionKey_;
}
- (void) setHasAesSessionKey:(BOOL) _value_ {
  hasAesSessionKey_ = !!_value_;
}
@synthesize aesSessionKey;
- (instancetype) init {
  if ((self = [super init])) {
    self.baseResponse = [BaseResponse defaultInstance];
    self.aesSessionKey = [NSData data];
  }
  return self;
}
static AuthResponse* defaultAuthResponseInstance = nil;
+ (void) initialize {
  if (self == [AuthResponse class]) {
    defaultAuthResponseInstance = [[AuthResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAuthResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultAuthResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasBaseResponse) {
    return NO;
  }
  if (!self.hasAesSessionKey) {
    return NO;
  }
  if (!self.baseResponse.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBaseResponse) {
    [output writeMessage:1 value:self.baseResponse];
  }
  if (self.hasAesSessionKey) {
    [output writeData:2 value:self.aesSessionKey];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBaseResponse) {
    size_ += computeMessageSize(1, self.baseResponse);
  }
  if (self.hasAesSessionKey) {
    size_ += computeDataSize(2, self.aesSessionKey);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AuthResponse*) parseFromData:(NSData*) data {
  return (AuthResponse*)[[[AuthResponse builder] mergeFromData:data] build];
}
+ (AuthResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AuthResponse*)[[[AuthResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AuthResponse*) parseFromInputStream:(NSInputStream*) input {
  return (AuthResponse*)[[[AuthResponse builder] mergeFromInputStream:input] build];
}
+ (AuthResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AuthResponse*)[[[AuthResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AuthResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AuthResponse*)[[[AuthResponse builder] mergeFromCodedInputStream:input] build];
}
+ (AuthResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AuthResponse*)[[[AuthResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AuthResponseBuilder*) builder {
  return [[AuthResponseBuilder alloc] init];
}
+ (AuthResponseBuilder*) builderWithPrototype:(AuthResponse*) prototype {
  return [[AuthResponse builder] mergeFrom:prototype];
}
- (AuthResponseBuilder*) builder {
  return [AuthResponse builder];
}
- (AuthResponseBuilder*) toBuilder {
  return [AuthResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBaseResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"baseResponse"];
    [self.baseResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAesSessionKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"aesSessionKey", self.aesSessionKey];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBaseResponse) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.baseResponse storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"baseResponse"];
  }
  if (self.hasAesSessionKey) {
    [dictionary setObject: self.aesSessionKey forKey: @"aesSessionKey"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AuthResponse class]]) {
    return NO;
  }
  AuthResponse *otherMessage = other;
  return
      self.hasBaseResponse == otherMessage.hasBaseResponse &&
      (!self.hasBaseResponse || [self.baseResponse isEqual:otherMessage.baseResponse]) &&
      self.hasAesSessionKey == otherMessage.hasAesSessionKey &&
      (!self.hasAesSessionKey || [self.aesSessionKey isEqual:otherMessage.aesSessionKey]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBaseResponse) {
    hashCode = hashCode * 31 + [self.baseResponse hash];
  }
  if (self.hasAesSessionKey) {
    hashCode = hashCode * 31 + [self.aesSessionKey hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AuthResponseBuilder()
@property (strong) AuthResponse* resultAuthResponse;
@end

@implementation AuthResponseBuilder
@synthesize resultAuthResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAuthResponse = [[AuthResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAuthResponse;
}
- (AuthResponseBuilder*) clear {
  self.resultAuthResponse = [[AuthResponse alloc] init];
  return self;
}
- (AuthResponseBuilder*) clone {
  return [AuthResponse builderWithPrototype:resultAuthResponse];
}
- (AuthResponse*) defaultInstance {
  return [AuthResponse defaultInstance];
}
- (AuthResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AuthResponse*) buildPartial {
  AuthResponse* returnMe = resultAuthResponse;
  self.resultAuthResponse = nil;
  return returnMe;
}
- (AuthResponseBuilder*) mergeFrom:(AuthResponse*) other {
  if (other == [AuthResponse defaultInstance]) {
    return self;
  }
  if (other.hasBaseResponse) {
    [self mergeBaseResponse:other.baseResponse];
  }
  if (other.hasAesSessionKey) {
    [self setAesSessionKey:other.aesSessionKey];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AuthResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AuthResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BaseResponseBuilder* subBuilder = [BaseResponse builder];
        if (self.hasBaseResponse) {
          [subBuilder mergeFrom:self.baseResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBaseResponse:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setAesSessionKey:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasBaseResponse {
  return resultAuthResponse.hasBaseResponse;
}
- (BaseResponse*) baseResponse {
  return resultAuthResponse.baseResponse;
}
- (AuthResponseBuilder*) setBaseResponse:(BaseResponse*) value {
  resultAuthResponse.hasBaseResponse = YES;
  resultAuthResponse.baseResponse = value;
  return self;
}
- (AuthResponseBuilder*) setBaseResponseBuilder:(BaseResponseBuilder*) builderForValue {
  return [self setBaseResponse:[builderForValue build]];
}
- (AuthResponseBuilder*) mergeBaseResponse:(BaseResponse*) value {
  if (resultAuthResponse.hasBaseResponse &&
      resultAuthResponse.baseResponse != [BaseResponse defaultInstance]) {
    resultAuthResponse.baseResponse =
      [[[BaseResponse builderWithPrototype:resultAuthResponse.baseResponse] mergeFrom:value] buildPartial];
  } else {
    resultAuthResponse.baseResponse = value;
  }
  resultAuthResponse.hasBaseResponse = YES;
  return self;
}
- (AuthResponseBuilder*) clearBaseResponse {
  resultAuthResponse.hasBaseResponse = NO;
  resultAuthResponse.baseResponse = [BaseResponse defaultInstance];
  return self;
}
- (BOOL) hasAesSessionKey {
  return resultAuthResponse.hasAesSessionKey;
}
- (NSData*) aesSessionKey {
  return resultAuthResponse.aesSessionKey;
}
- (AuthResponseBuilder*) setAesSessionKey:(NSData*) value {
  resultAuthResponse.hasAesSessionKey = YES;
  resultAuthResponse.aesSessionKey = value;
  return self;
}
- (AuthResponseBuilder*) clearAesSessionKey {
  resultAuthResponse.hasAesSessionKey = NO;
  resultAuthResponse.aesSessionKey = [NSData data];
  return self;
}
@end

@interface InitRequest ()
@property (strong) BaseRequest* baseRequest;
@property (strong) NSData* respFieldFilter;
@property (strong) NSData* challenge;
@end

@implementation InitRequest

- (BOOL) hasBaseRequest {
  return !!hasBaseRequest_;
}
- (void) setHasBaseRequest:(BOOL) _value_ {
  hasBaseRequest_ = !!_value_;
}
@synthesize baseRequest;
- (BOOL) hasRespFieldFilter {
  return !!hasRespFieldFilter_;
}
- (void) setHasRespFieldFilter:(BOOL) _value_ {
  hasRespFieldFilter_ = !!_value_;
}
@synthesize respFieldFilter;
- (BOOL) hasChallenge {
  return !!hasChallenge_;
}
- (void) setHasChallenge:(BOOL) _value_ {
  hasChallenge_ = !!_value_;
}
@synthesize challenge;
- (instancetype) init {
  if ((self = [super init])) {
    self.baseRequest = [BaseRequest defaultInstance];
    self.respFieldFilter = [NSData data];
    self.challenge = [NSData data];
  }
  return self;
}
static InitRequest* defaultInitRequestInstance = nil;
+ (void) initialize {
  if (self == [InitRequest class]) {
    defaultInitRequestInstance = [[InitRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultInitRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultInitRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasBaseRequest) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBaseRequest) {
    [output writeMessage:1 value:self.baseRequest];
  }
  if (self.hasRespFieldFilter) {
    [output writeData:2 value:self.respFieldFilter];
  }
  if (self.hasChallenge) {
    [output writeData:3 value:self.challenge];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBaseRequest) {
    size_ += computeMessageSize(1, self.baseRequest);
  }
  if (self.hasRespFieldFilter) {
    size_ += computeDataSize(2, self.respFieldFilter);
  }
  if (self.hasChallenge) {
    size_ += computeDataSize(3, self.challenge);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (InitRequest*) parseFromData:(NSData*) data {
  return (InitRequest*)[[[InitRequest builder] mergeFromData:data] build];
}
+ (InitRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InitRequest*)[[[InitRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (InitRequest*) parseFromInputStream:(NSInputStream*) input {
  return (InitRequest*)[[[InitRequest builder] mergeFromInputStream:input] build];
}
+ (InitRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InitRequest*)[[[InitRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (InitRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (InitRequest*)[[[InitRequest builder] mergeFromCodedInputStream:input] build];
}
+ (InitRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InitRequest*)[[[InitRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (InitRequestBuilder*) builder {
  return [[InitRequestBuilder alloc] init];
}
+ (InitRequestBuilder*) builderWithPrototype:(InitRequest*) prototype {
  return [[InitRequest builder] mergeFrom:prototype];
}
- (InitRequestBuilder*) builder {
  return [InitRequest builder];
}
- (InitRequestBuilder*) toBuilder {
  return [InitRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBaseRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"baseRequest"];
    [self.baseRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRespFieldFilter) {
    [output appendFormat:@"%@%@: %@\n", indent, @"respFieldFilter", self.respFieldFilter];
  }
  if (self.hasChallenge) {
    [output appendFormat:@"%@%@: %@\n", indent, @"challenge", self.challenge];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBaseRequest) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.baseRequest storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"baseRequest"];
  }
  if (self.hasRespFieldFilter) {
    [dictionary setObject: self.respFieldFilter forKey: @"respFieldFilter"];
  }
  if (self.hasChallenge) {
    [dictionary setObject: self.challenge forKey: @"challenge"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[InitRequest class]]) {
    return NO;
  }
  InitRequest *otherMessage = other;
  return
      self.hasBaseRequest == otherMessage.hasBaseRequest &&
      (!self.hasBaseRequest || [self.baseRequest isEqual:otherMessage.baseRequest]) &&
      self.hasRespFieldFilter == otherMessage.hasRespFieldFilter &&
      (!self.hasRespFieldFilter || [self.respFieldFilter isEqual:otherMessage.respFieldFilter]) &&
      self.hasChallenge == otherMessage.hasChallenge &&
      (!self.hasChallenge || [self.challenge isEqual:otherMessage.challenge]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBaseRequest) {
    hashCode = hashCode * 31 + [self.baseRequest hash];
  }
  if (self.hasRespFieldFilter) {
    hashCode = hashCode * 31 + [self.respFieldFilter hash];
  }
  if (self.hasChallenge) {
    hashCode = hashCode * 31 + [self.challenge hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface InitRequestBuilder()
@property (strong) InitRequest* resultInitRequest;
@end

@implementation InitRequestBuilder
@synthesize resultInitRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultInitRequest = [[InitRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultInitRequest;
}
- (InitRequestBuilder*) clear {
  self.resultInitRequest = [[InitRequest alloc] init];
  return self;
}
- (InitRequestBuilder*) clone {
  return [InitRequest builderWithPrototype:resultInitRequest];
}
- (InitRequest*) defaultInstance {
  return [InitRequest defaultInstance];
}
- (InitRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (InitRequest*) buildPartial {
  InitRequest* returnMe = resultInitRequest;
  self.resultInitRequest = nil;
  return returnMe;
}
- (InitRequestBuilder*) mergeFrom:(InitRequest*) other {
  if (other == [InitRequest defaultInstance]) {
    return self;
  }
  if (other.hasBaseRequest) {
    [self mergeBaseRequest:other.baseRequest];
  }
  if (other.hasRespFieldFilter) {
    [self setRespFieldFilter:other.respFieldFilter];
  }
  if (other.hasChallenge) {
    [self setChallenge:other.challenge];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (InitRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (InitRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BaseRequestBuilder* subBuilder = [BaseRequest builder];
        if (self.hasBaseRequest) {
          [subBuilder mergeFrom:self.baseRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBaseRequest:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setRespFieldFilter:[input readData]];
        break;
      }
      case 26: {
        [self setChallenge:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasBaseRequest {
  return resultInitRequest.hasBaseRequest;
}
- (BaseRequest*) baseRequest {
  return resultInitRequest.baseRequest;
}
- (InitRequestBuilder*) setBaseRequest:(BaseRequest*) value {
  resultInitRequest.hasBaseRequest = YES;
  resultInitRequest.baseRequest = value;
  return self;
}
- (InitRequestBuilder*) setBaseRequestBuilder:(BaseRequestBuilder*) builderForValue {
  return [self setBaseRequest:[builderForValue build]];
}
- (InitRequestBuilder*) mergeBaseRequest:(BaseRequest*) value {
  if (resultInitRequest.hasBaseRequest &&
      resultInitRequest.baseRequest != [BaseRequest defaultInstance]) {
    resultInitRequest.baseRequest =
      [[[BaseRequest builderWithPrototype:resultInitRequest.baseRequest] mergeFrom:value] buildPartial];
  } else {
    resultInitRequest.baseRequest = value;
  }
  resultInitRequest.hasBaseRequest = YES;
  return self;
}
- (InitRequestBuilder*) clearBaseRequest {
  resultInitRequest.hasBaseRequest = NO;
  resultInitRequest.baseRequest = [BaseRequest defaultInstance];
  return self;
}
- (BOOL) hasRespFieldFilter {
  return resultInitRequest.hasRespFieldFilter;
}
- (NSData*) respFieldFilter {
  return resultInitRequest.respFieldFilter;
}
- (InitRequestBuilder*) setRespFieldFilter:(NSData*) value {
  resultInitRequest.hasRespFieldFilter = YES;
  resultInitRequest.respFieldFilter = value;
  return self;
}
- (InitRequestBuilder*) clearRespFieldFilter {
  resultInitRequest.hasRespFieldFilter = NO;
  resultInitRequest.respFieldFilter = [NSData data];
  return self;
}
- (BOOL) hasChallenge {
  return resultInitRequest.hasChallenge;
}
- (NSData*) challenge {
  return resultInitRequest.challenge;
}
- (InitRequestBuilder*) setChallenge:(NSData*) value {
  resultInitRequest.hasChallenge = YES;
  resultInitRequest.challenge = value;
  return self;
}
- (InitRequestBuilder*) clearChallenge {
  resultInitRequest.hasChallenge = NO;
  resultInitRequest.challenge = [NSData data];
  return self;
}
@end

@interface InitResponse ()
@property (strong) BaseResponse* baseResponse;
@property UInt32 userIdHigh;
@property UInt32 userIdLow;
@property UInt32 challeangeAnswer;
@property EmInitScence initScence;
@property UInt32 autoSyncMaxDurationSecond;
@property (strong) NSString* userNickName;
@property EmPlatformType platformType;
@property (strong) NSString* model;
@property (strong) NSString* os;
@property SInt32 time;
@property SInt32 timeZone;
@property (strong) NSString* timeString;
@end

@implementation InitResponse

- (BOOL) hasBaseResponse {
  return !!hasBaseResponse_;
}
- (void) setHasBaseResponse:(BOOL) _value_ {
  hasBaseResponse_ = !!_value_;
}
@synthesize baseResponse;
- (BOOL) hasUserIdHigh {
  return !!hasUserIdHigh_;
}
- (void) setHasUserIdHigh:(BOOL) _value_ {
  hasUserIdHigh_ = !!_value_;
}
@synthesize userIdHigh;
- (BOOL) hasUserIdLow {
  return !!hasUserIdLow_;
}
- (void) setHasUserIdLow:(BOOL) _value_ {
  hasUserIdLow_ = !!_value_;
}
@synthesize userIdLow;
- (BOOL) hasChalleangeAnswer {
  return !!hasChalleangeAnswer_;
}
- (void) setHasChalleangeAnswer:(BOOL) _value_ {
  hasChalleangeAnswer_ = !!_value_;
}
@synthesize challeangeAnswer;
- (BOOL) hasInitScence {
  return !!hasInitScence_;
}
- (void) setHasInitScence:(BOOL) _value_ {
  hasInitScence_ = !!_value_;
}
@synthesize initScence;
- (BOOL) hasAutoSyncMaxDurationSecond {
  return !!hasAutoSyncMaxDurationSecond_;
}
- (void) setHasAutoSyncMaxDurationSecond:(BOOL) _value_ {
  hasAutoSyncMaxDurationSecond_ = !!_value_;
}
@synthesize autoSyncMaxDurationSecond;
- (BOOL) hasUserNickName {
  return !!hasUserNickName_;
}
- (void) setHasUserNickName:(BOOL) _value_ {
  hasUserNickName_ = !!_value_;
}
@synthesize userNickName;
- (BOOL) hasPlatformType {
  return !!hasPlatformType_;
}
- (void) setHasPlatformType:(BOOL) _value_ {
  hasPlatformType_ = !!_value_;
}
@synthesize platformType;
- (BOOL) hasModel {
  return !!hasModel_;
}
- (void) setHasModel:(BOOL) _value_ {
  hasModel_ = !!_value_;
}
@synthesize model;
- (BOOL) hasOs {
  return !!hasOs_;
}
- (void) setHasOs:(BOOL) _value_ {
  hasOs_ = !!_value_;
}
@synthesize os;
- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) _value_ {
  hasTime_ = !!_value_;
}
@synthesize time;
- (BOOL) hasTimeZone {
  return !!hasTimeZone_;
}
- (void) setHasTimeZone:(BOOL) _value_ {
  hasTimeZone_ = !!_value_;
}
@synthesize timeZone;
- (BOOL) hasTimeString {
  return !!hasTimeString_;
}
- (void) setHasTimeString:(BOOL) _value_ {
  hasTimeString_ = !!_value_;
}
@synthesize timeString;
- (instancetype) init {
  if ((self = [super init])) {
    self.baseResponse = [BaseResponse defaultInstance];
    self.userIdHigh = 0;
    self.userIdLow = 0;
    self.challeangeAnswer = 0;
    self.initScence = EmInitScenceEisDeviceChat;
    self.autoSyncMaxDurationSecond = 0;
    self.userNickName = @"";
    self.platformType = EmPlatformTypeEptIos;
    self.model = @"";
    self.os = @"";
    self.time = 0;
    self.timeZone = 0;
    self.timeString = @"";
  }
  return self;
}
static InitResponse* defaultInitResponseInstance = nil;
+ (void) initialize {
  if (self == [InitResponse class]) {
    defaultInitResponseInstance = [[InitResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultInitResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultInitResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasBaseResponse) {
    return NO;
  }
  if (!self.hasUserIdHigh) {
    return NO;
  }
  if (!self.hasUserIdLow) {
    return NO;
  }
  if (!self.baseResponse.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBaseResponse) {
    [output writeMessage:1 value:self.baseResponse];
  }
  if (self.hasUserIdHigh) {
    [output writeUInt32:2 value:self.userIdHigh];
  }
  if (self.hasUserIdLow) {
    [output writeUInt32:3 value:self.userIdLow];
  }
  if (self.hasChalleangeAnswer) {
    [output writeUInt32:4 value:self.challeangeAnswer];
  }
  if (self.hasInitScence) {
    [output writeEnum:5 value:self.initScence];
  }
  if (self.hasAutoSyncMaxDurationSecond) {
    [output writeUInt32:6 value:self.autoSyncMaxDurationSecond];
  }
  if (self.hasUserNickName) {
    [output writeString:11 value:self.userNickName];
  }
  if (self.hasPlatformType) {
    [output writeEnum:12 value:self.platformType];
  }
  if (self.hasModel) {
    [output writeString:13 value:self.model];
  }
  if (self.hasOs) {
    [output writeString:14 value:self.os];
  }
  if (self.hasTime) {
    [output writeInt32:15 value:self.time];
  }
  if (self.hasTimeZone) {
    [output writeInt32:16 value:self.timeZone];
  }
  if (self.hasTimeString) {
    [output writeString:17 value:self.timeString];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBaseResponse) {
    size_ += computeMessageSize(1, self.baseResponse);
  }
  if (self.hasUserIdHigh) {
    size_ += computeUInt32Size(2, self.userIdHigh);
  }
  if (self.hasUserIdLow) {
    size_ += computeUInt32Size(3, self.userIdLow);
  }
  if (self.hasChalleangeAnswer) {
    size_ += computeUInt32Size(4, self.challeangeAnswer);
  }
  if (self.hasInitScence) {
    size_ += computeEnumSize(5, self.initScence);
  }
  if (self.hasAutoSyncMaxDurationSecond) {
    size_ += computeUInt32Size(6, self.autoSyncMaxDurationSecond);
  }
  if (self.hasUserNickName) {
    size_ += computeStringSize(11, self.userNickName);
  }
  if (self.hasPlatformType) {
    size_ += computeEnumSize(12, self.platformType);
  }
  if (self.hasModel) {
    size_ += computeStringSize(13, self.model);
  }
  if (self.hasOs) {
    size_ += computeStringSize(14, self.os);
  }
  if (self.hasTime) {
    size_ += computeInt32Size(15, self.time);
  }
  if (self.hasTimeZone) {
    size_ += computeInt32Size(16, self.timeZone);
  }
  if (self.hasTimeString) {
    size_ += computeStringSize(17, self.timeString);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (InitResponse*) parseFromData:(NSData*) data {
  return (InitResponse*)[[[InitResponse builder] mergeFromData:data] build];
}
+ (InitResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InitResponse*)[[[InitResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (InitResponse*) parseFromInputStream:(NSInputStream*) input {
  return (InitResponse*)[[[InitResponse builder] mergeFromInputStream:input] build];
}
+ (InitResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InitResponse*)[[[InitResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (InitResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (InitResponse*)[[[InitResponse builder] mergeFromCodedInputStream:input] build];
}
+ (InitResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InitResponse*)[[[InitResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (InitResponseBuilder*) builder {
  return [[InitResponseBuilder alloc] init];
}
+ (InitResponseBuilder*) builderWithPrototype:(InitResponse*) prototype {
  return [[InitResponse builder] mergeFrom:prototype];
}
- (InitResponseBuilder*) builder {
  return [InitResponse builder];
}
- (InitResponseBuilder*) toBuilder {
  return [InitResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBaseResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"baseResponse"];
    [self.baseResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserIdHigh) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userIdHigh", [NSNumber numberWithInteger:self.userIdHigh]];
  }
  if (self.hasUserIdLow) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userIdLow", [NSNumber numberWithInteger:self.userIdLow]];
  }
  if (self.hasChalleangeAnswer) {
    [output appendFormat:@"%@%@: %@\n", indent, @"challeangeAnswer", [NSNumber numberWithInteger:self.challeangeAnswer]];
  }
  if (self.hasInitScence) {
    [output appendFormat:@"%@%@: %@\n", indent, @"initScence", NSStringFromEmInitScence(self.initScence)];
  }
  if (self.hasAutoSyncMaxDurationSecond) {
    [output appendFormat:@"%@%@: %@\n", indent, @"autoSyncMaxDurationSecond", [NSNumber numberWithInteger:self.autoSyncMaxDurationSecond]];
  }
  if (self.hasUserNickName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userNickName", self.userNickName];
  }
  if (self.hasPlatformType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"platformType", NSStringFromEmPlatformType(self.platformType)];
  }
  if (self.hasModel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"model", self.model];
  }
  if (self.hasOs) {
    [output appendFormat:@"%@%@: %@\n", indent, @"os", self.os];
  }
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInteger:self.time]];
  }
  if (self.hasTimeZone) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeZone", [NSNumber numberWithInteger:self.timeZone]];
  }
  if (self.hasTimeString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeString", self.timeString];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBaseResponse) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.baseResponse storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"baseResponse"];
  }
  if (self.hasUserIdHigh) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userIdHigh] forKey: @"userIdHigh"];
  }
  if (self.hasUserIdLow) {
    [dictionary setObject: [NSNumber numberWithInteger:self.userIdLow] forKey: @"userIdLow"];
  }
  if (self.hasChalleangeAnswer) {
    [dictionary setObject: [NSNumber numberWithInteger:self.challeangeAnswer] forKey: @"challeangeAnswer"];
  }
  if (self.hasInitScence) {
    [dictionary setObject: @(self.initScence) forKey: @"initScence"];
  }
  if (self.hasAutoSyncMaxDurationSecond) {
    [dictionary setObject: [NSNumber numberWithInteger:self.autoSyncMaxDurationSecond] forKey: @"autoSyncMaxDurationSecond"];
  }
  if (self.hasUserNickName) {
    [dictionary setObject: self.userNickName forKey: @"userNickName"];
  }
  if (self.hasPlatformType) {
    [dictionary setObject: @(self.platformType) forKey: @"platformType"];
  }
  if (self.hasModel) {
    [dictionary setObject: self.model forKey: @"model"];
  }
  if (self.hasOs) {
    [dictionary setObject: self.os forKey: @"os"];
  }
  if (self.hasTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.time] forKey: @"time"];
  }
  if (self.hasTimeZone) {
    [dictionary setObject: [NSNumber numberWithInteger:self.timeZone] forKey: @"timeZone"];
  }
  if (self.hasTimeString) {
    [dictionary setObject: self.timeString forKey: @"timeString"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[InitResponse class]]) {
    return NO;
  }
  InitResponse *otherMessage = other;
  return
      self.hasBaseResponse == otherMessage.hasBaseResponse &&
      (!self.hasBaseResponse || [self.baseResponse isEqual:otherMessage.baseResponse]) &&
      self.hasUserIdHigh == otherMessage.hasUserIdHigh &&
      (!self.hasUserIdHigh || self.userIdHigh == otherMessage.userIdHigh) &&
      self.hasUserIdLow == otherMessage.hasUserIdLow &&
      (!self.hasUserIdLow || self.userIdLow == otherMessage.userIdLow) &&
      self.hasChalleangeAnswer == otherMessage.hasChalleangeAnswer &&
      (!self.hasChalleangeAnswer || self.challeangeAnswer == otherMessage.challeangeAnswer) &&
      self.hasInitScence == otherMessage.hasInitScence &&
      (!self.hasInitScence || self.initScence == otherMessage.initScence) &&
      self.hasAutoSyncMaxDurationSecond == otherMessage.hasAutoSyncMaxDurationSecond &&
      (!self.hasAutoSyncMaxDurationSecond || self.autoSyncMaxDurationSecond == otherMessage.autoSyncMaxDurationSecond) &&
      self.hasUserNickName == otherMessage.hasUserNickName &&
      (!self.hasUserNickName || [self.userNickName isEqual:otherMessage.userNickName]) &&
      self.hasPlatformType == otherMessage.hasPlatformType &&
      (!self.hasPlatformType || self.platformType == otherMessage.platformType) &&
      self.hasModel == otherMessage.hasModel &&
      (!self.hasModel || [self.model isEqual:otherMessage.model]) &&
      self.hasOs == otherMessage.hasOs &&
      (!self.hasOs || [self.os isEqual:otherMessage.os]) &&
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasTimeZone == otherMessage.hasTimeZone &&
      (!self.hasTimeZone || self.timeZone == otherMessage.timeZone) &&
      self.hasTimeString == otherMessage.hasTimeString &&
      (!self.hasTimeString || [self.timeString isEqual:otherMessage.timeString]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBaseResponse) {
    hashCode = hashCode * 31 + [self.baseResponse hash];
  }
  if (self.hasUserIdHigh) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userIdHigh] hash];
  }
  if (self.hasUserIdLow) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userIdLow] hash];
  }
  if (self.hasChalleangeAnswer) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.challeangeAnswer] hash];
  }
  if (self.hasInitScence) {
    hashCode = hashCode * 31 + self.initScence;
  }
  if (self.hasAutoSyncMaxDurationSecond) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.autoSyncMaxDurationSecond] hash];
  }
  if (self.hasUserNickName) {
    hashCode = hashCode * 31 + [self.userNickName hash];
  }
  if (self.hasPlatformType) {
    hashCode = hashCode * 31 + self.platformType;
  }
  if (self.hasModel) {
    hashCode = hashCode * 31 + [self.model hash];
  }
  if (self.hasOs) {
    hashCode = hashCode * 31 + [self.os hash];
  }
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.time] hash];
  }
  if (self.hasTimeZone) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.timeZone] hash];
  }
  if (self.hasTimeString) {
    hashCode = hashCode * 31 + [self.timeString hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface InitResponseBuilder()
@property (strong) InitResponse* resultInitResponse;
@end

@implementation InitResponseBuilder
@synthesize resultInitResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultInitResponse = [[InitResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultInitResponse;
}
- (InitResponseBuilder*) clear {
  self.resultInitResponse = [[InitResponse alloc] init];
  return self;
}
- (InitResponseBuilder*) clone {
  return [InitResponse builderWithPrototype:resultInitResponse];
}
- (InitResponse*) defaultInstance {
  return [InitResponse defaultInstance];
}
- (InitResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (InitResponse*) buildPartial {
  InitResponse* returnMe = resultInitResponse;
  self.resultInitResponse = nil;
  return returnMe;
}
- (InitResponseBuilder*) mergeFrom:(InitResponse*) other {
  if (other == [InitResponse defaultInstance]) {
    return self;
  }
  if (other.hasBaseResponse) {
    [self mergeBaseResponse:other.baseResponse];
  }
  if (other.hasUserIdHigh) {
    [self setUserIdHigh:other.userIdHigh];
  }
  if (other.hasUserIdLow) {
    [self setUserIdLow:other.userIdLow];
  }
  if (other.hasChalleangeAnswer) {
    [self setChalleangeAnswer:other.challeangeAnswer];
  }
  if (other.hasInitScence) {
    [self setInitScence:other.initScence];
  }
  if (other.hasAutoSyncMaxDurationSecond) {
    [self setAutoSyncMaxDurationSecond:other.autoSyncMaxDurationSecond];
  }
  if (other.hasUserNickName) {
    [self setUserNickName:other.userNickName];
  }
  if (other.hasPlatformType) {
    [self setPlatformType:other.platformType];
  }
  if (other.hasModel) {
    [self setModel:other.model];
  }
  if (other.hasOs) {
    [self setOs:other.os];
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasTimeZone) {
    [self setTimeZone:other.timeZone];
  }
  if (other.hasTimeString) {
    [self setTimeString:other.timeString];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (InitResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (InitResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BaseResponseBuilder* subBuilder = [BaseResponse builder];
        if (self.hasBaseResponse) {
          [subBuilder mergeFrom:self.baseResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBaseResponse:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setUserIdHigh:[input readUInt32]];
        break;
      }
      case 24: {
        [self setUserIdLow:[input readUInt32]];
        break;
      }
      case 32: {
        [self setChalleangeAnswer:[input readUInt32]];
        break;
      }
      case 40: {
        EmInitScence value = (EmInitScence)[input readEnum];
        if (EmInitScenceIsValidValue(value)) {
          [self setInitScence:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 48: {
        [self setAutoSyncMaxDurationSecond:[input readUInt32]];
        break;
      }
      case 90: {
        [self setUserNickName:[input readString]];
        break;
      }
      case 96: {
        EmPlatformType value = (EmPlatformType)[input readEnum];
        if (EmPlatformTypeIsValidValue(value)) {
          [self setPlatformType:value];
        } else {
          [unknownFields mergeVarintField:12 value:value];
        }
        break;
      }
      case 106: {
        [self setModel:[input readString]];
        break;
      }
      case 114: {
        [self setOs:[input readString]];
        break;
      }
      case 120: {
        [self setTime:[input readInt32]];
        break;
      }
      case 128: {
        [self setTimeZone:[input readInt32]];
        break;
      }
      case 138: {
        [self setTimeString:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasBaseResponse {
  return resultInitResponse.hasBaseResponse;
}
- (BaseResponse*) baseResponse {
  return resultInitResponse.baseResponse;
}
- (InitResponseBuilder*) setBaseResponse:(BaseResponse*) value {
  resultInitResponse.hasBaseResponse = YES;
  resultInitResponse.baseResponse = value;
  return self;
}
- (InitResponseBuilder*) setBaseResponseBuilder:(BaseResponseBuilder*) builderForValue {
  return [self setBaseResponse:[builderForValue build]];
}
- (InitResponseBuilder*) mergeBaseResponse:(BaseResponse*) value {
  if (resultInitResponse.hasBaseResponse &&
      resultInitResponse.baseResponse != [BaseResponse defaultInstance]) {
    resultInitResponse.baseResponse =
      [[[BaseResponse builderWithPrototype:resultInitResponse.baseResponse] mergeFrom:value] buildPartial];
  } else {
    resultInitResponse.baseResponse = value;
  }
  resultInitResponse.hasBaseResponse = YES;
  return self;
}
- (InitResponseBuilder*) clearBaseResponse {
  resultInitResponse.hasBaseResponse = NO;
  resultInitResponse.baseResponse = [BaseResponse defaultInstance];
  return self;
}
- (BOOL) hasUserIdHigh {
  return resultInitResponse.hasUserIdHigh;
}
- (UInt32) userIdHigh {
  return resultInitResponse.userIdHigh;
}
- (InitResponseBuilder*) setUserIdHigh:(UInt32) value {
  resultInitResponse.hasUserIdHigh = YES;
  resultInitResponse.userIdHigh = value;
  return self;
}
- (InitResponseBuilder*) clearUserIdHigh {
  resultInitResponse.hasUserIdHigh = NO;
  resultInitResponse.userIdHigh = 0;
  return self;
}
- (BOOL) hasUserIdLow {
  return resultInitResponse.hasUserIdLow;
}
- (UInt32) userIdLow {
  return resultInitResponse.userIdLow;
}
- (InitResponseBuilder*) setUserIdLow:(UInt32) value {
  resultInitResponse.hasUserIdLow = YES;
  resultInitResponse.userIdLow = value;
  return self;
}
- (InitResponseBuilder*) clearUserIdLow {
  resultInitResponse.hasUserIdLow = NO;
  resultInitResponse.userIdLow = 0;
  return self;
}
- (BOOL) hasChalleangeAnswer {
  return resultInitResponse.hasChalleangeAnswer;
}
- (UInt32) challeangeAnswer {
  return resultInitResponse.challeangeAnswer;
}
- (InitResponseBuilder*) setChalleangeAnswer:(UInt32) value {
  resultInitResponse.hasChalleangeAnswer = YES;
  resultInitResponse.challeangeAnswer = value;
  return self;
}
- (InitResponseBuilder*) clearChalleangeAnswer {
  resultInitResponse.hasChalleangeAnswer = NO;
  resultInitResponse.challeangeAnswer = 0;
  return self;
}
- (BOOL) hasInitScence {
  return resultInitResponse.hasInitScence;
}
- (EmInitScence) initScence {
  return resultInitResponse.initScence;
}
- (InitResponseBuilder*) setInitScence:(EmInitScence) value {
  resultInitResponse.hasInitScence = YES;
  resultInitResponse.initScence = value;
  return self;
}
- (InitResponseBuilder*) clearInitScence {
  resultInitResponse.hasInitScence = NO;
  resultInitResponse.initScence = EmInitScenceEisDeviceChat;
  return self;
}
- (BOOL) hasAutoSyncMaxDurationSecond {
  return resultInitResponse.hasAutoSyncMaxDurationSecond;
}
- (UInt32) autoSyncMaxDurationSecond {
  return resultInitResponse.autoSyncMaxDurationSecond;
}
- (InitResponseBuilder*) setAutoSyncMaxDurationSecond:(UInt32) value {
  resultInitResponse.hasAutoSyncMaxDurationSecond = YES;
  resultInitResponse.autoSyncMaxDurationSecond = value;
  return self;
}
- (InitResponseBuilder*) clearAutoSyncMaxDurationSecond {
  resultInitResponse.hasAutoSyncMaxDurationSecond = NO;
  resultInitResponse.autoSyncMaxDurationSecond = 0;
  return self;
}
- (BOOL) hasUserNickName {
  return resultInitResponse.hasUserNickName;
}
- (NSString*) userNickName {
  return resultInitResponse.userNickName;
}
- (InitResponseBuilder*) setUserNickName:(NSString*) value {
  resultInitResponse.hasUserNickName = YES;
  resultInitResponse.userNickName = value;
  return self;
}
- (InitResponseBuilder*) clearUserNickName {
  resultInitResponse.hasUserNickName = NO;
  resultInitResponse.userNickName = @"";
  return self;
}
- (BOOL) hasPlatformType {
  return resultInitResponse.hasPlatformType;
}
- (EmPlatformType) platformType {
  return resultInitResponse.platformType;
}
- (InitResponseBuilder*) setPlatformType:(EmPlatformType) value {
  resultInitResponse.hasPlatformType = YES;
  resultInitResponse.platformType = value;
  return self;
}
- (InitResponseBuilder*) clearPlatformType {
  resultInitResponse.hasPlatformType = NO;
  resultInitResponse.platformType = EmPlatformTypeEptIos;
  return self;
}
- (BOOL) hasModel {
  return resultInitResponse.hasModel;
}
- (NSString*) model {
  return resultInitResponse.model;
}
- (InitResponseBuilder*) setModel:(NSString*) value {
  resultInitResponse.hasModel = YES;
  resultInitResponse.model = value;
  return self;
}
- (InitResponseBuilder*) clearModel {
  resultInitResponse.hasModel = NO;
  resultInitResponse.model = @"";
  return self;
}
- (BOOL) hasOs {
  return resultInitResponse.hasOs;
}
- (NSString*) os {
  return resultInitResponse.os;
}
- (InitResponseBuilder*) setOs:(NSString*) value {
  resultInitResponse.hasOs = YES;
  resultInitResponse.os = value;
  return self;
}
- (InitResponseBuilder*) clearOs {
  resultInitResponse.hasOs = NO;
  resultInitResponse.os = @"";
  return self;
}
- (BOOL) hasTime {
  return resultInitResponse.hasTime;
}
- (SInt32) time {
  return resultInitResponse.time;
}
- (InitResponseBuilder*) setTime:(SInt32) value {
  resultInitResponse.hasTime = YES;
  resultInitResponse.time = value;
  return self;
}
- (InitResponseBuilder*) clearTime {
  resultInitResponse.hasTime = NO;
  resultInitResponse.time = 0;
  return self;
}
- (BOOL) hasTimeZone {
  return resultInitResponse.hasTimeZone;
}
- (SInt32) timeZone {
  return resultInitResponse.timeZone;
}
- (InitResponseBuilder*) setTimeZone:(SInt32) value {
  resultInitResponse.hasTimeZone = YES;
  resultInitResponse.timeZone = value;
  return self;
}
- (InitResponseBuilder*) clearTimeZone {
  resultInitResponse.hasTimeZone = NO;
  resultInitResponse.timeZone = 0;
  return self;
}
- (BOOL) hasTimeString {
  return resultInitResponse.hasTimeString;
}
- (NSString*) timeString {
  return resultInitResponse.timeString;
}
- (InitResponseBuilder*) setTimeString:(NSString*) value {
  resultInitResponse.hasTimeString = YES;
  resultInitResponse.timeString = value;
  return self;
}
- (InitResponseBuilder*) clearTimeString {
  resultInitResponse.hasTimeString = NO;
  resultInitResponse.timeString = @"";
  return self;
}
@end

@interface SendDataRequest ()
@property (strong) BaseRequest* baseRequest;
@property (strong) NSData* datan;
@property EmDeviceDataType type;
@end

@implementation SendDataRequest

- (BOOL) hasBaseRequest {
  return !!hasBaseRequest_;
}
- (void) setHasBaseRequest:(BOOL) _value_ {
  hasBaseRequest_ = !!_value_;
}
@synthesize baseRequest;
- (BOOL) hasDatan {
  return !!hasDatan_;
}
- (void) setHasDatan:(BOOL) _value_ {
  hasDatan_ = !!_value_;
}
@synthesize datan;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (instancetype) init {
  if ((self = [super init])) {
    self.baseRequest = [BaseRequest defaultInstance];
    self.datan = [NSData data];
    self.type = EmDeviceDataTypeEddtManufatureSvr;
  }
  return self;
}
static SendDataRequest* defaultSendDataRequestInstance = nil;
+ (void) initialize {
  if (self == [SendDataRequest class]) {
    defaultSendDataRequestInstance = [[SendDataRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSendDataRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultSendDataRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasBaseRequest) {
    return NO;
  }
  if (!self.hasDatan) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBaseRequest) {
    [output writeMessage:1 value:self.baseRequest];
  }
  if (self.hasDatan) {
    [output writeData:2 value:self.datan];
  }
  if (self.hasType) {
    [output writeEnum:3 value:self.type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBaseRequest) {
    size_ += computeMessageSize(1, self.baseRequest);
  }
  if (self.hasDatan) {
    size_ += computeDataSize(2, self.datan);
  }
  if (self.hasType) {
    size_ += computeEnumSize(3, self.type);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SendDataRequest*) parseFromData:(NSData*) data {
  return (SendDataRequest*)[[[SendDataRequest builder] mergeFromData:data] build];
}
+ (SendDataRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SendDataRequest*)[[[SendDataRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SendDataRequest*) parseFromInputStream:(NSInputStream*) input {
  return (SendDataRequest*)[[[SendDataRequest builder] mergeFromInputStream:input] build];
}
+ (SendDataRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SendDataRequest*)[[[SendDataRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SendDataRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SendDataRequest*)[[[SendDataRequest builder] mergeFromCodedInputStream:input] build];
}
+ (SendDataRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SendDataRequest*)[[[SendDataRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SendDataRequestBuilder*) builder {
  return [[SendDataRequestBuilder alloc] init];
}
+ (SendDataRequestBuilder*) builderWithPrototype:(SendDataRequest*) prototype {
  return [[SendDataRequest builder] mergeFrom:prototype];
}
- (SendDataRequestBuilder*) builder {
  return [SendDataRequest builder];
}
- (SendDataRequestBuilder*) toBuilder {
  return [SendDataRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBaseRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"baseRequest"];
    [self.baseRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDatan) {
    [output appendFormat:@"%@%@: %@\n", indent, @"datan", self.datan];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromEmDeviceDataType(self.type)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBaseRequest) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.baseRequest storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"baseRequest"];
  }
  if (self.hasDatan) {
    [dictionary setObject: self.datan forKey: @"datan"];
  }
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SendDataRequest class]]) {
    return NO;
  }
  SendDataRequest *otherMessage = other;
  return
      self.hasBaseRequest == otherMessage.hasBaseRequest &&
      (!self.hasBaseRequest || [self.baseRequest isEqual:otherMessage.baseRequest]) &&
      self.hasDatan == otherMessage.hasDatan &&
      (!self.hasDatan || [self.datan isEqual:otherMessage.datan]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBaseRequest) {
    hashCode = hashCode * 31 + [self.baseRequest hash];
  }
  if (self.hasDatan) {
    hashCode = hashCode * 31 + [self.datan hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SendDataRequestBuilder()
@property (strong) SendDataRequest* resultSendDataRequest;
@end

@implementation SendDataRequestBuilder
@synthesize resultSendDataRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSendDataRequest = [[SendDataRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSendDataRequest;
}
- (SendDataRequestBuilder*) clear {
  self.resultSendDataRequest = [[SendDataRequest alloc] init];
  return self;
}
- (SendDataRequestBuilder*) clone {
  return [SendDataRequest builderWithPrototype:resultSendDataRequest];
}
- (SendDataRequest*) defaultInstance {
  return [SendDataRequest defaultInstance];
}
- (SendDataRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SendDataRequest*) buildPartial {
  SendDataRequest* returnMe = resultSendDataRequest;
  self.resultSendDataRequest = nil;
  return returnMe;
}
- (SendDataRequestBuilder*) mergeFrom:(SendDataRequest*) other {
  if (other == [SendDataRequest defaultInstance]) {
    return self;
  }
  if (other.hasBaseRequest) {
    [self mergeBaseRequest:other.baseRequest];
  }
  if (other.hasDatan) {
    [self setDatan:other.datan];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SendDataRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SendDataRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BaseRequestBuilder* subBuilder = [BaseRequest builder];
        if (self.hasBaseRequest) {
          [subBuilder mergeFrom:self.baseRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBaseRequest:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setDatan:[input readData]];
        break;
      }
      case 24: {
        EmDeviceDataType value = (EmDeviceDataType)[input readEnum];
        if (EmDeviceDataTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasBaseRequest {
  return resultSendDataRequest.hasBaseRequest;
}
- (BaseRequest*) baseRequest {
  return resultSendDataRequest.baseRequest;
}
- (SendDataRequestBuilder*) setBaseRequest:(BaseRequest*) value {
  resultSendDataRequest.hasBaseRequest = YES;
  resultSendDataRequest.baseRequest = value;
  return self;
}
- (SendDataRequestBuilder*) setBaseRequestBuilder:(BaseRequestBuilder*) builderForValue {
  return [self setBaseRequest:[builderForValue build]];
}
- (SendDataRequestBuilder*) mergeBaseRequest:(BaseRequest*) value {
  if (resultSendDataRequest.hasBaseRequest &&
      resultSendDataRequest.baseRequest != [BaseRequest defaultInstance]) {
    resultSendDataRequest.baseRequest =
      [[[BaseRequest builderWithPrototype:resultSendDataRequest.baseRequest] mergeFrom:value] buildPartial];
  } else {
    resultSendDataRequest.baseRequest = value;
  }
  resultSendDataRequest.hasBaseRequest = YES;
  return self;
}
- (SendDataRequestBuilder*) clearBaseRequest {
  resultSendDataRequest.hasBaseRequest = NO;
  resultSendDataRequest.baseRequest = [BaseRequest defaultInstance];
  return self;
}
- (BOOL) hasDatan {
  return resultSendDataRequest.hasDatan;
}
- (NSData*) datan {
  return resultSendDataRequest.datan;
}
- (SendDataRequestBuilder*) setDatan:(NSData*) value {
  resultSendDataRequest.hasDatan = YES;
  resultSendDataRequest.datan = value;
  return self;
}
- (SendDataRequestBuilder*) clearDatan {
  resultSendDataRequest.hasDatan = NO;
  resultSendDataRequest.datan = [NSData data];
  return self;
}
- (BOOL) hasType {
  return resultSendDataRequest.hasType;
}
- (EmDeviceDataType) type {
  return resultSendDataRequest.type;
}
- (SendDataRequestBuilder*) setType:(EmDeviceDataType) value {
  resultSendDataRequest.hasType = YES;
  resultSendDataRequest.type = value;
  return self;
}
- (SendDataRequestBuilder*) clearType {
  resultSendDataRequest.hasType = NO;
  resultSendDataRequest.type = EmDeviceDataTypeEddtManufatureSvr;
  return self;
}
@end

@interface SendDataResponse ()
@property (strong) BaseResponse* baseResponse;
@property (strong) NSData* datan;
@end

@implementation SendDataResponse

- (BOOL) hasBaseResponse {
  return !!hasBaseResponse_;
}
- (void) setHasBaseResponse:(BOOL) _value_ {
  hasBaseResponse_ = !!_value_;
}
@synthesize baseResponse;
- (BOOL) hasDatan {
  return !!hasDatan_;
}
- (void) setHasDatan:(BOOL) _value_ {
  hasDatan_ = !!_value_;
}
@synthesize datan;
- (instancetype) init {
  if ((self = [super init])) {
    self.baseResponse = [BaseResponse defaultInstance];
    self.datan = [NSData data];
  }
  return self;
}
static SendDataResponse* defaultSendDataResponseInstance = nil;
+ (void) initialize {
  if (self == [SendDataResponse class]) {
    defaultSendDataResponseInstance = [[SendDataResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSendDataResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultSendDataResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasBaseResponse) {
    return NO;
  }
  if (!self.baseResponse.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBaseResponse) {
    [output writeMessage:1 value:self.baseResponse];
  }
  if (self.hasDatan) {
    [output writeData:2 value:self.datan];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBaseResponse) {
    size_ += computeMessageSize(1, self.baseResponse);
  }
  if (self.hasDatan) {
    size_ += computeDataSize(2, self.datan);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SendDataResponse*) parseFromData:(NSData*) data {
  return (SendDataResponse*)[[[SendDataResponse builder] mergeFromData:data] build];
}
+ (SendDataResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SendDataResponse*)[[[SendDataResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SendDataResponse*) parseFromInputStream:(NSInputStream*) input {
  return (SendDataResponse*)[[[SendDataResponse builder] mergeFromInputStream:input] build];
}
+ (SendDataResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SendDataResponse*)[[[SendDataResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SendDataResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SendDataResponse*)[[[SendDataResponse builder] mergeFromCodedInputStream:input] build];
}
+ (SendDataResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SendDataResponse*)[[[SendDataResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SendDataResponseBuilder*) builder {
  return [[SendDataResponseBuilder alloc] init];
}
+ (SendDataResponseBuilder*) builderWithPrototype:(SendDataResponse*) prototype {
  return [[SendDataResponse builder] mergeFrom:prototype];
}
- (SendDataResponseBuilder*) builder {
  return [SendDataResponse builder];
}
- (SendDataResponseBuilder*) toBuilder {
  return [SendDataResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBaseResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"baseResponse"];
    [self.baseResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDatan) {
    [output appendFormat:@"%@%@: %@\n", indent, @"datan", self.datan];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBaseResponse) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.baseResponse storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"baseResponse"];
  }
  if (self.hasDatan) {
    [dictionary setObject: self.datan forKey: @"datan"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SendDataResponse class]]) {
    return NO;
  }
  SendDataResponse *otherMessage = other;
  return
      self.hasBaseResponse == otherMessage.hasBaseResponse &&
      (!self.hasBaseResponse || [self.baseResponse isEqual:otherMessage.baseResponse]) &&
      self.hasDatan == otherMessage.hasDatan &&
      (!self.hasDatan || [self.datan isEqual:otherMessage.datan]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBaseResponse) {
    hashCode = hashCode * 31 + [self.baseResponse hash];
  }
  if (self.hasDatan) {
    hashCode = hashCode * 31 + [self.datan hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SendDataResponseBuilder()
@property (strong) SendDataResponse* resultSendDataResponse;
@end

@implementation SendDataResponseBuilder
@synthesize resultSendDataResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSendDataResponse = [[SendDataResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSendDataResponse;
}
- (SendDataResponseBuilder*) clear {
  self.resultSendDataResponse = [[SendDataResponse alloc] init];
  return self;
}
- (SendDataResponseBuilder*) clone {
  return [SendDataResponse builderWithPrototype:resultSendDataResponse];
}
- (SendDataResponse*) defaultInstance {
  return [SendDataResponse defaultInstance];
}
- (SendDataResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SendDataResponse*) buildPartial {
  SendDataResponse* returnMe = resultSendDataResponse;
  self.resultSendDataResponse = nil;
  return returnMe;
}
- (SendDataResponseBuilder*) mergeFrom:(SendDataResponse*) other {
  if (other == [SendDataResponse defaultInstance]) {
    return self;
  }
  if (other.hasBaseResponse) {
    [self mergeBaseResponse:other.baseResponse];
  }
  if (other.hasDatan) {
    [self setDatan:other.datan];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SendDataResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SendDataResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BaseResponseBuilder* subBuilder = [BaseResponse builder];
        if (self.hasBaseResponse) {
          [subBuilder mergeFrom:self.baseResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBaseResponse:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setDatan:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasBaseResponse {
  return resultSendDataResponse.hasBaseResponse;
}
- (BaseResponse*) baseResponse {
  return resultSendDataResponse.baseResponse;
}
- (SendDataResponseBuilder*) setBaseResponse:(BaseResponse*) value {
  resultSendDataResponse.hasBaseResponse = YES;
  resultSendDataResponse.baseResponse = value;
  return self;
}
- (SendDataResponseBuilder*) setBaseResponseBuilder:(BaseResponseBuilder*) builderForValue {
  return [self setBaseResponse:[builderForValue build]];
}
- (SendDataResponseBuilder*) mergeBaseResponse:(BaseResponse*) value {
  if (resultSendDataResponse.hasBaseResponse &&
      resultSendDataResponse.baseResponse != [BaseResponse defaultInstance]) {
    resultSendDataResponse.baseResponse =
      [[[BaseResponse builderWithPrototype:resultSendDataResponse.baseResponse] mergeFrom:value] buildPartial];
  } else {
    resultSendDataResponse.baseResponse = value;
  }
  resultSendDataResponse.hasBaseResponse = YES;
  return self;
}
- (SendDataResponseBuilder*) clearBaseResponse {
  resultSendDataResponse.hasBaseResponse = NO;
  resultSendDataResponse.baseResponse = [BaseResponse defaultInstance];
  return self;
}
- (BOOL) hasDatan {
  return resultSendDataResponse.hasDatan;
}
- (NSData*) datan {
  return resultSendDataResponse.datan;
}
- (SendDataResponseBuilder*) setDatan:(NSData*) value {
  resultSendDataResponse.hasDatan = YES;
  resultSendDataResponse.datan = value;
  return self;
}
- (SendDataResponseBuilder*) clearDatan {
  resultSendDataResponse.hasDatan = NO;
  resultSendDataResponse.datan = [NSData data];
  return self;
}
@end

@interface RecvDataPush ()
@property (strong) BasePush* basePush;
@property (strong) NSData* datan;
@property EmDeviceDataType type;
@end

@implementation RecvDataPush

- (BOOL) hasBasePush {
  return !!hasBasePush_;
}
- (void) setHasBasePush:(BOOL) _value_ {
  hasBasePush_ = !!_value_;
}
@synthesize basePush;
- (BOOL) hasDatan {
  return !!hasDatan_;
}
- (void) setHasDatan:(BOOL) _value_ {
  hasDatan_ = !!_value_;
}
@synthesize datan;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (instancetype) init {
  if ((self = [super init])) {
    self.basePush = [BasePush defaultInstance];
    self.datan = [NSData data];
    self.type = EmDeviceDataTypeEddtManufatureSvr;
  }
  return self;
}
static RecvDataPush* defaultRecvDataPushInstance = nil;
+ (void) initialize {
  if (self == [RecvDataPush class]) {
    defaultRecvDataPushInstance = [[RecvDataPush alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRecvDataPushInstance;
}
- (instancetype) defaultInstance {
  return defaultRecvDataPushInstance;
}
- (BOOL) isInitialized {
  if (!self.hasBasePush) {
    return NO;
  }
  if (!self.hasDatan) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBasePush) {
    [output writeMessage:1 value:self.basePush];
  }
  if (self.hasDatan) {
    [output writeData:2 value:self.datan];
  }
  if (self.hasType) {
    [output writeEnum:3 value:self.type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBasePush) {
    size_ += computeMessageSize(1, self.basePush);
  }
  if (self.hasDatan) {
    size_ += computeDataSize(2, self.datan);
  }
  if (self.hasType) {
    size_ += computeEnumSize(3, self.type);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RecvDataPush*) parseFromData:(NSData*) data {
  return (RecvDataPush*)[[[RecvDataPush builder] mergeFromData:data] build];
}
+ (RecvDataPush*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RecvDataPush*)[[[RecvDataPush builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RecvDataPush*) parseFromInputStream:(NSInputStream*) input {
  return (RecvDataPush*)[[[RecvDataPush builder] mergeFromInputStream:input] build];
}
+ (RecvDataPush*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RecvDataPush*)[[[RecvDataPush builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RecvDataPush*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RecvDataPush*)[[[RecvDataPush builder] mergeFromCodedInputStream:input] build];
}
+ (RecvDataPush*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RecvDataPush*)[[[RecvDataPush builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RecvDataPushBuilder*) builder {
  return [[RecvDataPushBuilder alloc] init];
}
+ (RecvDataPushBuilder*) builderWithPrototype:(RecvDataPush*) prototype {
  return [[RecvDataPush builder] mergeFrom:prototype];
}
- (RecvDataPushBuilder*) builder {
  return [RecvDataPush builder];
}
- (RecvDataPushBuilder*) toBuilder {
  return [RecvDataPush builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBasePush) {
    [output appendFormat:@"%@%@ {\n", indent, @"basePush"];
    [self.basePush writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDatan) {
    [output appendFormat:@"%@%@: %@\n", indent, @"datan", self.datan];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromEmDeviceDataType(self.type)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBasePush) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.basePush storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"basePush"];
  }
  if (self.hasDatan) {
    [dictionary setObject: self.datan forKey: @"datan"];
  }
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RecvDataPush class]]) {
    return NO;
  }
  RecvDataPush *otherMessage = other;
  return
      self.hasBasePush == otherMessage.hasBasePush &&
      (!self.hasBasePush || [self.basePush isEqual:otherMessage.basePush]) &&
      self.hasDatan == otherMessage.hasDatan &&
      (!self.hasDatan || [self.datan isEqual:otherMessage.datan]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBasePush) {
    hashCode = hashCode * 31 + [self.basePush hash];
  }
  if (self.hasDatan) {
    hashCode = hashCode * 31 + [self.datan hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RecvDataPushBuilder()
@property (strong) RecvDataPush* resultRecvDataPush;
@end

@implementation RecvDataPushBuilder
@synthesize resultRecvDataPush;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRecvDataPush = [[RecvDataPush alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRecvDataPush;
}
- (RecvDataPushBuilder*) clear {
  self.resultRecvDataPush = [[RecvDataPush alloc] init];
  return self;
}
- (RecvDataPushBuilder*) clone {
  return [RecvDataPush builderWithPrototype:resultRecvDataPush];
}
- (RecvDataPush*) defaultInstance {
  return [RecvDataPush defaultInstance];
}
- (RecvDataPush*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RecvDataPush*) buildPartial {
  RecvDataPush* returnMe = resultRecvDataPush;
  self.resultRecvDataPush = nil;
  return returnMe;
}
- (RecvDataPushBuilder*) mergeFrom:(RecvDataPush*) other {
  if (other == [RecvDataPush defaultInstance]) {
    return self;
  }
  if (other.hasBasePush) {
    [self mergeBasePush:other.basePush];
  }
  if (other.hasDatan) {
    [self setDatan:other.datan];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RecvDataPushBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RecvDataPushBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BasePushBuilder* subBuilder = [BasePush builder];
        if (self.hasBasePush) {
          [subBuilder mergeFrom:self.basePush];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBasePush:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setDatan:[input readData]];
        break;
      }
      case 24: {
        EmDeviceDataType value = (EmDeviceDataType)[input readEnum];
        if (EmDeviceDataTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasBasePush {
  return resultRecvDataPush.hasBasePush;
}
- (BasePush*) basePush {
  return resultRecvDataPush.basePush;
}
- (RecvDataPushBuilder*) setBasePush:(BasePush*) value {
  resultRecvDataPush.hasBasePush = YES;
  resultRecvDataPush.basePush = value;
  return self;
}
- (RecvDataPushBuilder*) setBasePushBuilder:(BasePushBuilder*) builderForValue {
  return [self setBasePush:[builderForValue build]];
}
- (RecvDataPushBuilder*) mergeBasePush:(BasePush*) value {
  if (resultRecvDataPush.hasBasePush &&
      resultRecvDataPush.basePush != [BasePush defaultInstance]) {
    resultRecvDataPush.basePush =
      [[[BasePush builderWithPrototype:resultRecvDataPush.basePush] mergeFrom:value] buildPartial];
  } else {
    resultRecvDataPush.basePush = value;
  }
  resultRecvDataPush.hasBasePush = YES;
  return self;
}
- (RecvDataPushBuilder*) clearBasePush {
  resultRecvDataPush.hasBasePush = NO;
  resultRecvDataPush.basePush = [BasePush defaultInstance];
  return self;
}
- (BOOL) hasDatan {
  return resultRecvDataPush.hasDatan;
}
- (NSData*) datan {
  return resultRecvDataPush.datan;
}
- (RecvDataPushBuilder*) setDatan:(NSData*) value {
  resultRecvDataPush.hasDatan = YES;
  resultRecvDataPush.datan = value;
  return self;
}
- (RecvDataPushBuilder*) clearDatan {
  resultRecvDataPush.hasDatan = NO;
  resultRecvDataPush.datan = [NSData data];
  return self;
}
- (BOOL) hasType {
  return resultRecvDataPush.hasType;
}
- (EmDeviceDataType) type {
  return resultRecvDataPush.type;
}
- (RecvDataPushBuilder*) setType:(EmDeviceDataType) value {
  resultRecvDataPush.hasType = YES;
  resultRecvDataPush.type = value;
  return self;
}
- (RecvDataPushBuilder*) clearType {
  resultRecvDataPush.hasType = NO;
  resultRecvDataPush.type = EmDeviceDataTypeEddtManufatureSvr;
  return self;
}
@end

@interface SwitchViewPush ()
@property (strong) BasePush* basePush;
@property EmSwitchViewOp switchViewOp;
@property EmViewId viewId;
@end

@implementation SwitchViewPush

- (BOOL) hasBasePush {
  return !!hasBasePush_;
}
- (void) setHasBasePush:(BOOL) _value_ {
  hasBasePush_ = !!_value_;
}
@synthesize basePush;
- (BOOL) hasSwitchViewOp {
  return !!hasSwitchViewOp_;
}
- (void) setHasSwitchViewOp:(BOOL) _value_ {
  hasSwitchViewOp_ = !!_value_;
}
@synthesize switchViewOp;
- (BOOL) hasViewId {
  return !!hasViewId_;
}
- (void) setHasViewId:(BOOL) _value_ {
  hasViewId_ = !!_value_;
}
@synthesize viewId;
- (instancetype) init {
  if ((self = [super init])) {
    self.basePush = [BasePush defaultInstance];
    self.switchViewOp = EmSwitchViewOpEsvoEnter;
    self.viewId = EmViewIdEviDeviceChatView;
  }
  return self;
}
static SwitchViewPush* defaultSwitchViewPushInstance = nil;
+ (void) initialize {
  if (self == [SwitchViewPush class]) {
    defaultSwitchViewPushInstance = [[SwitchViewPush alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSwitchViewPushInstance;
}
- (instancetype) defaultInstance {
  return defaultSwitchViewPushInstance;
}
- (BOOL) isInitialized {
  if (!self.hasBasePush) {
    return NO;
  }
  if (!self.hasSwitchViewOp) {
    return NO;
  }
  if (!self.hasViewId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBasePush) {
    [output writeMessage:1 value:self.basePush];
  }
  if (self.hasSwitchViewOp) {
    [output writeEnum:2 value:self.switchViewOp];
  }
  if (self.hasViewId) {
    [output writeEnum:3 value:self.viewId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBasePush) {
    size_ += computeMessageSize(1, self.basePush);
  }
  if (self.hasSwitchViewOp) {
    size_ += computeEnumSize(2, self.switchViewOp);
  }
  if (self.hasViewId) {
    size_ += computeEnumSize(3, self.viewId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SwitchViewPush*) parseFromData:(NSData*) data {
  return (SwitchViewPush*)[[[SwitchViewPush builder] mergeFromData:data] build];
}
+ (SwitchViewPush*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SwitchViewPush*)[[[SwitchViewPush builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SwitchViewPush*) parseFromInputStream:(NSInputStream*) input {
  return (SwitchViewPush*)[[[SwitchViewPush builder] mergeFromInputStream:input] build];
}
+ (SwitchViewPush*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SwitchViewPush*)[[[SwitchViewPush builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SwitchViewPush*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SwitchViewPush*)[[[SwitchViewPush builder] mergeFromCodedInputStream:input] build];
}
+ (SwitchViewPush*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SwitchViewPush*)[[[SwitchViewPush builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SwitchViewPushBuilder*) builder {
  return [[SwitchViewPushBuilder alloc] init];
}
+ (SwitchViewPushBuilder*) builderWithPrototype:(SwitchViewPush*) prototype {
  return [[SwitchViewPush builder] mergeFrom:prototype];
}
- (SwitchViewPushBuilder*) builder {
  return [SwitchViewPush builder];
}
- (SwitchViewPushBuilder*) toBuilder {
  return [SwitchViewPush builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBasePush) {
    [output appendFormat:@"%@%@ {\n", indent, @"basePush"];
    [self.basePush writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSwitchViewOp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"switchViewOp", NSStringFromEmSwitchViewOp(self.switchViewOp)];
  }
  if (self.hasViewId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"viewId", NSStringFromEmViewId(self.viewId)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBasePush) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.basePush storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"basePush"];
  }
  if (self.hasSwitchViewOp) {
    [dictionary setObject: @(self.switchViewOp) forKey: @"switchViewOp"];
  }
  if (self.hasViewId) {
    [dictionary setObject: @(self.viewId) forKey: @"viewId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SwitchViewPush class]]) {
    return NO;
  }
  SwitchViewPush *otherMessage = other;
  return
      self.hasBasePush == otherMessage.hasBasePush &&
      (!self.hasBasePush || [self.basePush isEqual:otherMessage.basePush]) &&
      self.hasSwitchViewOp == otherMessage.hasSwitchViewOp &&
      (!self.hasSwitchViewOp || self.switchViewOp == otherMessage.switchViewOp) &&
      self.hasViewId == otherMessage.hasViewId &&
      (!self.hasViewId || self.viewId == otherMessage.viewId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBasePush) {
    hashCode = hashCode * 31 + [self.basePush hash];
  }
  if (self.hasSwitchViewOp) {
    hashCode = hashCode * 31 + self.switchViewOp;
  }
  if (self.hasViewId) {
    hashCode = hashCode * 31 + self.viewId;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SwitchViewPushBuilder()
@property (strong) SwitchViewPush* resultSwitchViewPush;
@end

@implementation SwitchViewPushBuilder
@synthesize resultSwitchViewPush;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSwitchViewPush = [[SwitchViewPush alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSwitchViewPush;
}
- (SwitchViewPushBuilder*) clear {
  self.resultSwitchViewPush = [[SwitchViewPush alloc] init];
  return self;
}
- (SwitchViewPushBuilder*) clone {
  return [SwitchViewPush builderWithPrototype:resultSwitchViewPush];
}
- (SwitchViewPush*) defaultInstance {
  return [SwitchViewPush defaultInstance];
}
- (SwitchViewPush*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SwitchViewPush*) buildPartial {
  SwitchViewPush* returnMe = resultSwitchViewPush;
  self.resultSwitchViewPush = nil;
  return returnMe;
}
- (SwitchViewPushBuilder*) mergeFrom:(SwitchViewPush*) other {
  if (other == [SwitchViewPush defaultInstance]) {
    return self;
  }
  if (other.hasBasePush) {
    [self mergeBasePush:other.basePush];
  }
  if (other.hasSwitchViewOp) {
    [self setSwitchViewOp:other.switchViewOp];
  }
  if (other.hasViewId) {
    [self setViewId:other.viewId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SwitchViewPushBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SwitchViewPushBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BasePushBuilder* subBuilder = [BasePush builder];
        if (self.hasBasePush) {
          [subBuilder mergeFrom:self.basePush];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBasePush:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        EmSwitchViewOp value = (EmSwitchViewOp)[input readEnum];
        if (EmSwitchViewOpIsValidValue(value)) {
          [self setSwitchViewOp:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        EmViewId value = (EmViewId)[input readEnum];
        if (EmViewIdIsValidValue(value)) {
          [self setViewId:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasBasePush {
  return resultSwitchViewPush.hasBasePush;
}
- (BasePush*) basePush {
  return resultSwitchViewPush.basePush;
}
- (SwitchViewPushBuilder*) setBasePush:(BasePush*) value {
  resultSwitchViewPush.hasBasePush = YES;
  resultSwitchViewPush.basePush = value;
  return self;
}
- (SwitchViewPushBuilder*) setBasePushBuilder:(BasePushBuilder*) builderForValue {
  return [self setBasePush:[builderForValue build]];
}
- (SwitchViewPushBuilder*) mergeBasePush:(BasePush*) value {
  if (resultSwitchViewPush.hasBasePush &&
      resultSwitchViewPush.basePush != [BasePush defaultInstance]) {
    resultSwitchViewPush.basePush =
      [[[BasePush builderWithPrototype:resultSwitchViewPush.basePush] mergeFrom:value] buildPartial];
  } else {
    resultSwitchViewPush.basePush = value;
  }
  resultSwitchViewPush.hasBasePush = YES;
  return self;
}
- (SwitchViewPushBuilder*) clearBasePush {
  resultSwitchViewPush.hasBasePush = NO;
  resultSwitchViewPush.basePush = [BasePush defaultInstance];
  return self;
}
- (BOOL) hasSwitchViewOp {
  return resultSwitchViewPush.hasSwitchViewOp;
}
- (EmSwitchViewOp) switchViewOp {
  return resultSwitchViewPush.switchViewOp;
}
- (SwitchViewPushBuilder*) setSwitchViewOp:(EmSwitchViewOp) value {
  resultSwitchViewPush.hasSwitchViewOp = YES;
  resultSwitchViewPush.switchViewOp = value;
  return self;
}
- (SwitchViewPushBuilder*) clearSwitchViewOp {
  resultSwitchViewPush.hasSwitchViewOp = NO;
  resultSwitchViewPush.switchViewOp = EmSwitchViewOpEsvoEnter;
  return self;
}
- (BOOL) hasViewId {
  return resultSwitchViewPush.hasViewId;
}
- (EmViewId) viewId {
  return resultSwitchViewPush.viewId;
}
- (SwitchViewPushBuilder*) setViewId:(EmViewId) value {
  resultSwitchViewPush.hasViewId = YES;
  resultSwitchViewPush.viewId = value;
  return self;
}
- (SwitchViewPushBuilder*) clearViewId {
  resultSwitchViewPush.hasViewId = NO;
  resultSwitchViewPush.viewId = EmViewIdEviDeviceChatView;
  return self;
}
@end

@interface SwitchBackgroudPush ()
@property (strong) BasePush* basePush;
@property EmSwitchBackgroundOp switchBackgroundOp;
@end

@implementation SwitchBackgroudPush

- (BOOL) hasBasePush {
  return !!hasBasePush_;
}
- (void) setHasBasePush:(BOOL) _value_ {
  hasBasePush_ = !!_value_;
}
@synthesize basePush;
- (BOOL) hasSwitchBackgroundOp {
  return !!hasSwitchBackgroundOp_;
}
- (void) setHasSwitchBackgroundOp:(BOOL) _value_ {
  hasSwitchBackgroundOp_ = !!_value_;
}
@synthesize switchBackgroundOp;
- (instancetype) init {
  if ((self = [super init])) {
    self.basePush = [BasePush defaultInstance];
    self.switchBackgroundOp = EmSwitchBackgroundOpEsboEnterBackground;
  }
  return self;
}
static SwitchBackgroudPush* defaultSwitchBackgroudPushInstance = nil;
+ (void) initialize {
  if (self == [SwitchBackgroudPush class]) {
    defaultSwitchBackgroudPushInstance = [[SwitchBackgroudPush alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSwitchBackgroudPushInstance;
}
- (instancetype) defaultInstance {
  return defaultSwitchBackgroudPushInstance;
}
- (BOOL) isInitialized {
  if (!self.hasBasePush) {
    return NO;
  }
  if (!self.hasSwitchBackgroundOp) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBasePush) {
    [output writeMessage:1 value:self.basePush];
  }
  if (self.hasSwitchBackgroundOp) {
    [output writeEnum:2 value:self.switchBackgroundOp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBasePush) {
    size_ += computeMessageSize(1, self.basePush);
  }
  if (self.hasSwitchBackgroundOp) {
    size_ += computeEnumSize(2, self.switchBackgroundOp);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SwitchBackgroudPush*) parseFromData:(NSData*) data {
  return (SwitchBackgroudPush*)[[[SwitchBackgroudPush builder] mergeFromData:data] build];
}
+ (SwitchBackgroudPush*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SwitchBackgroudPush*)[[[SwitchBackgroudPush builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SwitchBackgroudPush*) parseFromInputStream:(NSInputStream*) input {
  return (SwitchBackgroudPush*)[[[SwitchBackgroudPush builder] mergeFromInputStream:input] build];
}
+ (SwitchBackgroudPush*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SwitchBackgroudPush*)[[[SwitchBackgroudPush builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SwitchBackgroudPush*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SwitchBackgroudPush*)[[[SwitchBackgroudPush builder] mergeFromCodedInputStream:input] build];
}
+ (SwitchBackgroudPush*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SwitchBackgroudPush*)[[[SwitchBackgroudPush builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SwitchBackgroudPushBuilder*) builder {
  return [[SwitchBackgroudPushBuilder alloc] init];
}
+ (SwitchBackgroudPushBuilder*) builderWithPrototype:(SwitchBackgroudPush*) prototype {
  return [[SwitchBackgroudPush builder] mergeFrom:prototype];
}
- (SwitchBackgroudPushBuilder*) builder {
  return [SwitchBackgroudPush builder];
}
- (SwitchBackgroudPushBuilder*) toBuilder {
  return [SwitchBackgroudPush builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBasePush) {
    [output appendFormat:@"%@%@ {\n", indent, @"basePush"];
    [self.basePush writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSwitchBackgroundOp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"switchBackgroundOp", NSStringFromEmSwitchBackgroundOp(self.switchBackgroundOp)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBasePush) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.basePush storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"basePush"];
  }
  if (self.hasSwitchBackgroundOp) {
    [dictionary setObject: @(self.switchBackgroundOp) forKey: @"switchBackgroundOp"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SwitchBackgroudPush class]]) {
    return NO;
  }
  SwitchBackgroudPush *otherMessage = other;
  return
      self.hasBasePush == otherMessage.hasBasePush &&
      (!self.hasBasePush || [self.basePush isEqual:otherMessage.basePush]) &&
      self.hasSwitchBackgroundOp == otherMessage.hasSwitchBackgroundOp &&
      (!self.hasSwitchBackgroundOp || self.switchBackgroundOp == otherMessage.switchBackgroundOp) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBasePush) {
    hashCode = hashCode * 31 + [self.basePush hash];
  }
  if (self.hasSwitchBackgroundOp) {
    hashCode = hashCode * 31 + self.switchBackgroundOp;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SwitchBackgroudPushBuilder()
@property (strong) SwitchBackgroudPush* resultSwitchBackgroudPush;
@end

@implementation SwitchBackgroudPushBuilder
@synthesize resultSwitchBackgroudPush;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSwitchBackgroudPush = [[SwitchBackgroudPush alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSwitchBackgroudPush;
}
- (SwitchBackgroudPushBuilder*) clear {
  self.resultSwitchBackgroudPush = [[SwitchBackgroudPush alloc] init];
  return self;
}
- (SwitchBackgroudPushBuilder*) clone {
  return [SwitchBackgroudPush builderWithPrototype:resultSwitchBackgroudPush];
}
- (SwitchBackgroudPush*) defaultInstance {
  return [SwitchBackgroudPush defaultInstance];
}
- (SwitchBackgroudPush*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SwitchBackgroudPush*) buildPartial {
  SwitchBackgroudPush* returnMe = resultSwitchBackgroudPush;
  self.resultSwitchBackgroudPush = nil;
  return returnMe;
}
- (SwitchBackgroudPushBuilder*) mergeFrom:(SwitchBackgroudPush*) other {
  if (other == [SwitchBackgroudPush defaultInstance]) {
    return self;
  }
  if (other.hasBasePush) {
    [self mergeBasePush:other.basePush];
  }
  if (other.hasSwitchBackgroundOp) {
    [self setSwitchBackgroundOp:other.switchBackgroundOp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SwitchBackgroudPushBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SwitchBackgroudPushBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        BasePushBuilder* subBuilder = [BasePush builder];
        if (self.hasBasePush) {
          [subBuilder mergeFrom:self.basePush];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBasePush:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        EmSwitchBackgroundOp value = (EmSwitchBackgroundOp)[input readEnum];
        if (EmSwitchBackgroundOpIsValidValue(value)) {
          [self setSwitchBackgroundOp:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasBasePush {
  return resultSwitchBackgroudPush.hasBasePush;
}
- (BasePush*) basePush {
  return resultSwitchBackgroudPush.basePush;
}
- (SwitchBackgroudPushBuilder*) setBasePush:(BasePush*) value {
  resultSwitchBackgroudPush.hasBasePush = YES;
  resultSwitchBackgroudPush.basePush = value;
  return self;
}
- (SwitchBackgroudPushBuilder*) setBasePushBuilder:(BasePushBuilder*) builderForValue {
  return [self setBasePush:[builderForValue build]];
}
- (SwitchBackgroudPushBuilder*) mergeBasePush:(BasePush*) value {
  if (resultSwitchBackgroudPush.hasBasePush &&
      resultSwitchBackgroudPush.basePush != [BasePush defaultInstance]) {
    resultSwitchBackgroudPush.basePush =
      [[[BasePush builderWithPrototype:resultSwitchBackgroudPush.basePush] mergeFrom:value] buildPartial];
  } else {
    resultSwitchBackgroudPush.basePush = value;
  }
  resultSwitchBackgroudPush.hasBasePush = YES;
  return self;
}
- (SwitchBackgroudPushBuilder*) clearBasePush {
  resultSwitchBackgroudPush.hasBasePush = NO;
  resultSwitchBackgroudPush.basePush = [BasePush defaultInstance];
  return self;
}
- (BOOL) hasSwitchBackgroundOp {
  return resultSwitchBackgroudPush.hasSwitchBackgroundOp;
}
- (EmSwitchBackgroundOp) switchBackgroundOp {
  return resultSwitchBackgroudPush.switchBackgroundOp;
}
- (SwitchBackgroudPushBuilder*) setSwitchBackgroundOp:(EmSwitchBackgroundOp) value {
  resultSwitchBackgroudPush.hasSwitchBackgroundOp = YES;
  resultSwitchBackgroudPush.switchBackgroundOp = value;
  return self;
}
- (SwitchBackgroudPushBuilder*) clearSwitchBackgroundOp {
  resultSwitchBackgroudPush.hasSwitchBackgroundOp = NO;
  resultSwitchBackgroudPush.switchBackgroundOp = EmSwitchBackgroundOpEsboEnterBackground;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
